
ssd1306_fsociety.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08002768  08002768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b80  08002b80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b88  08002b88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b8c  08002b8c  00012b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000047c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000488  20000488  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b8f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014bc  00000000  00000000  00027bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  00029088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  00029828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015df  00000000  00000000  00029f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009667  00000000  00000000  0002b517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1b36  00000000  00000000  00034b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f66b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ef0  00000000  00000000  000f6704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002750 	.word	0x08002750

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002750 	.word	0x08002750

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fc1f 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f815 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8ab 	bl	8000634 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f87b 	bl	80005d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80004e2:	f000 f93d 	bl	8000760 <SSD1306_Init>
  SSD1306_DrawBitmap(0,0,fsociety , 128, 64, 1);
 80004e6:	2301      	movs	r3, #1
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2340      	movs	r3, #64	; 0x40
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	4a03      	ldr	r2, [pc, #12]	; (8000500 <main+0x34>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f8ca 	bl	800068e <SSD1306_DrawBitmap>
   SSD1306_UpdateScreen();
 80004fa:	f000 f9f5 	bl	80008e8 <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <main+0x32>
 8000500:	08002768 	.word	0x08002768

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 f914 	bl	8002740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <SystemClock_Config+0xcc>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xd0>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000574:	2308      	movs	r3, #8
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000578:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fc30 	bl	8001df0 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000596:	f000 f875 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2302      	movs	r3, #2
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2105      	movs	r1, #5
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fe91 	bl	80022e0 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f85e 	bl	8000684 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	; 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_I2C1_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_I2C1_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_I2C1_Init+0x50>)
 8000616:	f000 fe71 	bl	80012fc <HAL_I2C_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f830 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000028 	.word	0x20000028
 800062c:	40005400 	.word	0x40005400
 8000630:	00061a80 	.word	0x00061a80

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_GPIO_Init+0x4c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <MX_GPIO_Init+0x4c>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_GPIO_Init+0x4c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_GPIO_Init+0x4c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <MX_GPIO_Init+0x4c>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_GPIO_Init+0x4c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>

0800068e <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	60ba      	str	r2, [r7, #8]
 8000696:	461a      	mov	r2, r3
 8000698:	4603      	mov	r3, r0
 800069a:	81fb      	strh	r3, [r7, #14]
 800069c:	460b      	mov	r3, r1
 800069e:	81bb      	strh	r3, [r7, #12]
 80006a0:	4613      	mov	r3, r2
 80006a2:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80006a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a8:	3307      	adds	r3, #7
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	da00      	bge.n	80006b0 <SSD1306_DrawBitmap+0x22>
 80006ae:	3307      	adds	r3, #7
 80006b0:	10db      	asrs	r3, r3, #3
 80006b2:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	82bb      	strh	r3, [r7, #20]
 80006bc:	e044      	b.n	8000748 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	827b      	strh	r3, [r7, #18]
 80006c2:	e02f      	b.n	8000724 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80006c4:	8a7b      	ldrh	r3, [r7, #18]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	75fb      	strb	r3, [r7, #23]
 80006d4:	e012      	b.n	80006fc <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80006d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80006de:	fb03 f202 	mul.w	r2, r3, r2
 80006e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	da00      	bge.n	80006ec <SSD1306_DrawBitmap+0x5e>
 80006ea:	3307      	adds	r3, #7
 80006ec:	10db      	asrs	r3, r3, #3
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	4413      	add	r3, r2
 80006f2:	461a      	mov	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80006fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000700:	2b00      	cmp	r3, #0
 8000702:	da09      	bge.n	8000718 <SSD1306_DrawBitmap+0x8a>
 8000704:	89fa      	ldrh	r2, [r7, #14]
 8000706:	8a7b      	ldrh	r3, [r7, #18]
 8000708:	4413      	add	r3, r2
 800070a:	b29b      	uxth	r3, r3
 800070c:	89b9      	ldrh	r1, [r7, #12]
 800070e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f92e 	bl	8000974 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800071c:	b29b      	uxth	r3, r3
 800071e:	3301      	adds	r3, #1
 8000720:	b29b      	uxth	r3, r3
 8000722:	827b      	strh	r3, [r7, #18]
 8000724:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072c:	429a      	cmp	r2, r3
 800072e:	dbc9      	blt.n	80006c4 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000730:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000734:	b29b      	uxth	r3, r3
 8000736:	3301      	adds	r3, #1
 8000738:	b29b      	uxth	r3, r3
 800073a:	82bb      	strh	r3, [r7, #20]
 800073c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000740:	b29b      	uxth	r3, r3
 8000742:	3301      	adds	r3, #1
 8000744:	b29b      	uxth	r3, r3
 8000746:	81bb      	strh	r3, [r7, #12]
 8000748:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800074c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbb4      	blt.n	80006be <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000766:	f000 f965 	bl	8000a34 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800076a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800076e:	2201      	movs	r2, #1
 8000770:	2178      	movs	r1, #120	; 0x78
 8000772:	485b      	ldr	r0, [pc, #364]	; (80008e0 <SSD1306_Init+0x180>)
 8000774:	f001 f804 	bl	8001780 <HAL_I2C_IsDeviceReady>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800077e:	2300      	movs	r3, #0
 8000780:	e0a9      	b.n	80008d6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000782:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000786:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000788:	e002      	b.n	8000790 <SSD1306_Init+0x30>
		p--;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3b01      	subs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f9      	bne.n	800078a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000796:	22ae      	movs	r2, #174	; 0xae
 8000798:	2100      	movs	r1, #0
 800079a:	2078      	movs	r0, #120	; 0x78
 800079c:	f000 f9c6 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80007a0:	2220      	movs	r2, #32
 80007a2:	2100      	movs	r1, #0
 80007a4:	2078      	movs	r0, #120	; 0x78
 80007a6:	f000 f9c1 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80007aa:	2210      	movs	r2, #16
 80007ac:	2100      	movs	r1, #0
 80007ae:	2078      	movs	r0, #120	; 0x78
 80007b0:	f000 f9bc 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007b4:	22b0      	movs	r2, #176	; 0xb0
 80007b6:	2100      	movs	r1, #0
 80007b8:	2078      	movs	r0, #120	; 0x78
 80007ba:	f000 f9b7 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80007be:	22c8      	movs	r2, #200	; 0xc8
 80007c0:	2100      	movs	r1, #0
 80007c2:	2078      	movs	r0, #120	; 0x78
 80007c4:	f000 f9b2 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2078      	movs	r0, #120	; 0x78
 80007ce:	f000 f9ad 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80007d2:	2210      	movs	r2, #16
 80007d4:	2100      	movs	r1, #0
 80007d6:	2078      	movs	r0, #120	; 0x78
 80007d8:	f000 f9a8 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80007dc:	2240      	movs	r2, #64	; 0x40
 80007de:	2100      	movs	r1, #0
 80007e0:	2078      	movs	r0, #120	; 0x78
 80007e2:	f000 f9a3 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80007e6:	2281      	movs	r2, #129	; 0x81
 80007e8:	2100      	movs	r1, #0
 80007ea:	2078      	movs	r0, #120	; 0x78
 80007ec:	f000 f99e 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80007f0:	22ff      	movs	r2, #255	; 0xff
 80007f2:	2100      	movs	r1, #0
 80007f4:	2078      	movs	r0, #120	; 0x78
 80007f6:	f000 f999 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80007fa:	22a1      	movs	r2, #161	; 0xa1
 80007fc:	2100      	movs	r1, #0
 80007fe:	2078      	movs	r0, #120	; 0x78
 8000800:	f000 f994 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000804:	22a6      	movs	r2, #166	; 0xa6
 8000806:	2100      	movs	r1, #0
 8000808:	2078      	movs	r0, #120	; 0x78
 800080a:	f000 f98f 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800080e:	22a8      	movs	r2, #168	; 0xa8
 8000810:	2100      	movs	r1, #0
 8000812:	2078      	movs	r0, #120	; 0x78
 8000814:	f000 f98a 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000818:	223f      	movs	r2, #63	; 0x3f
 800081a:	2100      	movs	r1, #0
 800081c:	2078      	movs	r0, #120	; 0x78
 800081e:	f000 f985 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000822:	22a4      	movs	r2, #164	; 0xa4
 8000824:	2100      	movs	r1, #0
 8000826:	2078      	movs	r0, #120	; 0x78
 8000828:	f000 f980 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800082c:	22d3      	movs	r2, #211	; 0xd3
 800082e:	2100      	movs	r1, #0
 8000830:	2078      	movs	r0, #120	; 0x78
 8000832:	f000 f97b 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2078      	movs	r0, #120	; 0x78
 800083c:	f000 f976 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000840:	22d5      	movs	r2, #213	; 0xd5
 8000842:	2100      	movs	r1, #0
 8000844:	2078      	movs	r0, #120	; 0x78
 8000846:	f000 f971 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800084a:	22f0      	movs	r2, #240	; 0xf0
 800084c:	2100      	movs	r1, #0
 800084e:	2078      	movs	r0, #120	; 0x78
 8000850:	f000 f96c 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000854:	22d9      	movs	r2, #217	; 0xd9
 8000856:	2100      	movs	r1, #0
 8000858:	2078      	movs	r0, #120	; 0x78
 800085a:	f000 f967 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800085e:	2222      	movs	r2, #34	; 0x22
 8000860:	2100      	movs	r1, #0
 8000862:	2078      	movs	r0, #120	; 0x78
 8000864:	f000 f962 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000868:	22da      	movs	r2, #218	; 0xda
 800086a:	2100      	movs	r1, #0
 800086c:	2078      	movs	r0, #120	; 0x78
 800086e:	f000 f95d 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000872:	2212      	movs	r2, #18
 8000874:	2100      	movs	r1, #0
 8000876:	2078      	movs	r0, #120	; 0x78
 8000878:	f000 f958 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800087c:	22db      	movs	r2, #219	; 0xdb
 800087e:	2100      	movs	r1, #0
 8000880:	2078      	movs	r0, #120	; 0x78
 8000882:	f000 f953 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	2078      	movs	r0, #120	; 0x78
 800088c:	f000 f94e 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000890:	228d      	movs	r2, #141	; 0x8d
 8000892:	2100      	movs	r1, #0
 8000894:	2078      	movs	r0, #120	; 0x78
 8000896:	f000 f949 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800089a:	2214      	movs	r2, #20
 800089c:	2100      	movs	r1, #0
 800089e:	2078      	movs	r0, #120	; 0x78
 80008a0:	f000 f944 	bl	8000b2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80008a4:	22af      	movs	r2, #175	; 0xaf
 80008a6:	2100      	movs	r1, #0
 80008a8:	2078      	movs	r0, #120	; 0x78
 80008aa:	f000 f93f 	bl	8000b2c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80008ae:	222e      	movs	r2, #46	; 0x2e
 80008b0:	2100      	movs	r1, #0
 80008b2:	2078      	movs	r0, #120	; 0x78
 80008b4:	f000 f93a 	bl	8000b2c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 f843 	bl	8000944 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80008be:	f000 f813 	bl	80008e8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <SSD1306_Init+0x184>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SSD1306_Init+0x184>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <SSD1306_Init+0x184>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000028 	.word	0x20000028
 80008e4:	2000047c 	.word	0x2000047c

080008e8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
 80008f2:	e01d      	b.n	8000930 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	3b50      	subs	r3, #80	; 0x50
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	2078      	movs	r0, #120	; 0x78
 8000900:	f000 f914 	bl	8000b2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2078      	movs	r0, #120	; 0x78
 800090a:	f000 f90f 	bl	8000b2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800090e:	2210      	movs	r2, #16
 8000910:	2100      	movs	r1, #0
 8000912:	2078      	movs	r0, #120	; 0x78
 8000914:	f000 f90a 	bl	8000b2c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	01db      	lsls	r3, r3, #7
 800091c:	4a08      	ldr	r2, [pc, #32]	; (8000940 <SSD1306_UpdateScreen+0x58>)
 800091e:	441a      	add	r2, r3
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	2078      	movs	r0, #120	; 0x78
 8000926:	f000 f89b 	bl	8000a60 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b07      	cmp	r3, #7
 8000934:	d9de      	bls.n	80008f4 <SSD1306_UpdateScreen+0xc>
	}
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000007c 	.word	0x2000007c

08000944 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <SSD1306_Fill+0x14>
 8000954:	2300      	movs	r3, #0
 8000956:	e000      	b.n	800095a <SSD1306_Fill+0x16>
 8000958:	23ff      	movs	r3, #255	; 0xff
 800095a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095e:	4619      	mov	r1, r3
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <SSD1306_Fill+0x2c>)
 8000962:	f001 feed 	bl	8002740 <memset>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000007c 	.word	0x2000007c

08000974 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	460b      	mov	r3, r1
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	70fb      	strb	r3, [r7, #3]
	if (
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	2b7f      	cmp	r3, #127	; 0x7f
 800098a:	d848      	bhi.n	8000a1e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800098c:	88bb      	ldrh	r3, [r7, #4]
 800098e:	2b3f      	cmp	r3, #63	; 0x3f
 8000990:	d845      	bhi.n	8000a1e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <SSD1306_DrawPixel+0xb8>)
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf0c      	ite	eq
 80009a0:	2301      	moveq	r3, #1
 80009a2:	2300      	movne	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d11a      	bne.n	80009e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009ae:	88fa      	ldrh	r2, [r7, #6]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b298      	uxth	r0, r3
 80009b6:	4603      	mov	r3, r0
 80009b8:	01db      	lsls	r3, r3, #7
 80009ba:	4413      	add	r3, r2
 80009bc:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <SSD1306_DrawPixel+0xbc>)
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	b25a      	sxtb	r2, r3
 80009c2:	88bb      	ldrh	r3, [r7, #4]
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b259      	sxtb	r1, r3
 80009d4:	88fa      	ldrh	r2, [r7, #6]
 80009d6:	4603      	mov	r3, r0
 80009d8:	01db      	lsls	r3, r3, #7
 80009da:	4413      	add	r3, r2
 80009dc:	b2c9      	uxtb	r1, r1
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <SSD1306_DrawPixel+0xbc>)
 80009e0:	54d1      	strb	r1, [r2, r3]
 80009e2:	e01d      	b.n	8000a20 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80009e4:	88fa      	ldrh	r2, [r7, #6]
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	b298      	uxth	r0, r3
 80009ec:	4603      	mov	r3, r0
 80009ee:	01db      	lsls	r3, r3, #7
 80009f0:	4413      	add	r3, r2
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <SSD1306_DrawPixel+0xbc>)
 80009f4:	5cd3      	ldrb	r3, [r2, r3]
 80009f6:	b25a      	sxtb	r2, r3
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	b259      	sxtb	r1, r3
 8000a0e:	88fa      	ldrh	r2, [r7, #6]
 8000a10:	4603      	mov	r3, r0
 8000a12:	01db      	lsls	r3, r3, #7
 8000a14:	4413      	add	r3, r2
 8000a16:	b2c9      	uxtb	r1, r1
 8000a18:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <SSD1306_DrawPixel+0xbc>)
 8000a1a:	54d1      	strb	r1, [r2, r3]
 8000a1c:	e000      	b.n	8000a20 <SSD1306_DrawPixel+0xac>
		return;
 8000a1e:	bf00      	nop
	}
}
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000047c 	.word	0x2000047c
 8000a30:	2000007c 	.word	0x2000007c

08000a34 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <ssd1306_I2C_Init+0x28>)
 8000a3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a3e:	e002      	b.n	8000a46 <ssd1306_I2C_Init+0x12>
		p--;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f9      	bne.n	8000a40 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	0003d090 	.word	0x0003d090

08000a60 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b0c7      	sub	sp, #284	; 0x11c
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	4604      	mov	r4, r0
 8000a68:	4608      	mov	r0, r1
 8000a6a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a6e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a72:	600a      	str	r2, [r1, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a7a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a7e:	4622      	mov	r2, r4
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a86:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a96:	460a      	mov	r2, r1
 8000a98:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000aa2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000aa6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000aaa:	7812      	ldrb	r2, [r2, #0]
 8000aac:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ab4:	e015      	b.n	8000ae2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ab6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000abe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aca:	3301      	adds	r3, #1
 8000acc:	7811      	ldrb	r1, [r2, #0]
 8000ace:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ad2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000ad6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ad8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000adc:	3301      	adds	r3, #1
 8000ade:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ae2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000aec:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000af0:	8812      	ldrh	r2, [r2, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d8df      	bhi.n	8000ab6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000af6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000afa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b299      	uxth	r1, r3
 8000b02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	f107 020c 	add.w	r2, r7, #12
 8000b14:	200a      	movs	r0, #10
 8000b16:	9000      	str	r0, [sp, #0]
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <ssd1306_I2C_WriteMulti+0xc8>)
 8000b1a:	f000 fd33 	bl	8001584 <HAL_I2C_Master_Transmit>
}
 8000b1e:	bf00      	nop
 8000b20:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	20000028 	.word	0x20000028

08000b2c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	460b      	mov	r3, r1
 8000b38:	71bb      	strb	r3, [r7, #6]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b3e:	79bb      	ldrb	r3, [r7, #6]
 8000b40:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b42:	797b      	ldrb	r3, [r7, #5]
 8000b44:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	b299      	uxth	r1, r3
 8000b4a:	f107 020c 	add.w	r2, r7, #12
 8000b4e:	230a      	movs	r3, #10
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2302      	movs	r3, #2
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <ssd1306_I2C_Write+0x38>)
 8000b56:	f000 fd15 	bl	8001584 <HAL_I2C_Master_Transmit>
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000028 	.word	0x20000028

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ba6:	2007      	movs	r0, #7
 8000ba8:	f000 f9d8 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_I2C_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf6:	23c0      	movs	r3, #192	; 0xc0
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfa:	2312      	movs	r3, #18
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c06:	2304      	movs	r3, #4
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <HAL_I2C_MspInit+0x8c>)
 8000c12:	f000 f9d7 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_I2C_MspInit+0x88>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f890 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ffd7 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f001 fd03 	bl	80026f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fbeb 	bl	80004cc <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d04:	08002b90 	.word	0x08002b90
  ldr r2, =_sbss
 8000d08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d0c:	20000488 	.word	0x20000488

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f90d 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff ff0e 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f917 	bl	8000faa <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f8ed 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000484 	.word	0x20000484

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000484 	.word	0x20000484

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff47 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff5c 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffb0 	bl	8000f18 <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e16b      	b.n	80012b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 815a 	bne.w	80012b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80b4 	beq.w	80012b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <HAL_GPIO_Init+0x30c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a5f      	ldr	r2, [pc, #380]	; (80012d0 <HAL_GPIO_Init+0x30c>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <HAL_GPIO_Init+0x30c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a5b      	ldr	r2, [pc, #364]	; (80012d4 <HAL_GPIO_Init+0x310>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x314>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d02b      	beq.n	80011ea <HAL_GPIO_Init+0x226>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <HAL_GPIO_Init+0x318>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d025      	beq.n	80011e6 <HAL_GPIO_Init+0x222>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d01f      	beq.n	80011e2 <HAL_GPIO_Init+0x21e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x320>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x21a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_GPIO_Init+0x324>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x216>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x328>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x212>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <HAL_GPIO_Init+0x32c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x330>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x20a>
 80011ca:	2307      	movs	r3, #7
 80011cc:	e00e      	b.n	80011ec <HAL_GPIO_Init+0x228>
 80011ce:	2308      	movs	r3, #8
 80011d0:	e00c      	b.n	80011ec <HAL_GPIO_Init+0x228>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00a      	b.n	80011ec <HAL_GPIO_Init+0x228>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e008      	b.n	80011ec <HAL_GPIO_Init+0x228>
 80011da:	2304      	movs	r3, #4
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x228>
 80011de:	2303      	movs	r3, #3
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x228>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x228>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x228>
 80011ea:	2300      	movs	r3, #0
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f002 0203 	and.w	r2, r2, #3
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fc:	4935      	ldr	r1, [pc, #212]	; (80012d4 <HAL_GPIO_Init+0x310>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <HAL_GPIO_Init+0x334>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122e:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <HAL_GPIO_Init+0x334>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_GPIO_Init+0x334>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <HAL_GPIO_Init+0x334>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <HAL_GPIO_Init+0x334>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_GPIO_Init+0x334>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_GPIO_Init+0x334>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HAL_GPIO_Init+0x334>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	f67f ae90 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40013800 	.word	0x40013800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40021c00 	.word	0x40021c00
 80012f8:	40013c00 	.word	0x40013c00

080012fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e12b      	b.n	8001566 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d106      	bne.n	8001328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fc48 	bl	8000bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2224      	movs	r2, #36	; 0x24
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800134e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800135e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001360:	f001 f9b6 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8001364:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a81      	ldr	r2, [pc, #516]	; (8001570 <HAL_I2C_Init+0x274>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d807      	bhi.n	8001380 <HAL_I2C_Init+0x84>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4a80      	ldr	r2, [pc, #512]	; (8001574 <HAL_I2C_Init+0x278>)
 8001374:	4293      	cmp	r3, r2
 8001376:	bf94      	ite	ls
 8001378:	2301      	movls	r3, #1
 800137a:	2300      	movhi	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	e006      	b.n	800138e <HAL_I2C_Init+0x92>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4a7d      	ldr	r2, [pc, #500]	; (8001578 <HAL_I2C_Init+0x27c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	bf94      	ite	ls
 8001388:	2301      	movls	r3, #1
 800138a:	2300      	movhi	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0e7      	b.n	8001566 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4a78      	ldr	r2, [pc, #480]	; (800157c <HAL_I2C_Init+0x280>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	0c9b      	lsrs	r3, r3, #18
 80013a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a6a      	ldr	r2, [pc, #424]	; (8001570 <HAL_I2C_Init+0x274>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d802      	bhi.n	80013d0 <HAL_I2C_Init+0xd4>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3301      	adds	r3, #1
 80013ce:	e009      	b.n	80013e4 <HAL_I2C_Init+0xe8>
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	4a69      	ldr	r2, [pc, #420]	; (8001580 <HAL_I2C_Init+0x284>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	099b      	lsrs	r3, r3, #6
 80013e2:	3301      	adds	r3, #1
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	495c      	ldr	r1, [pc, #368]	; (8001570 <HAL_I2C_Init+0x274>)
 8001400:	428b      	cmp	r3, r1
 8001402:	d819      	bhi.n	8001438 <HAL_I2C_Init+0x13c>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1e59      	subs	r1, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001412:	1c59      	adds	r1, r3, #1
 8001414:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001418:	400b      	ands	r3, r1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00a      	beq.n	8001434 <HAL_I2C_Init+0x138>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1e59      	subs	r1, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fbb1 f3f3 	udiv	r3, r1, r3
 800142c:	3301      	adds	r3, #1
 800142e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001432:	e051      	b.n	80014d8 <HAL_I2C_Init+0x1dc>
 8001434:	2304      	movs	r3, #4
 8001436:	e04f      	b.n	80014d8 <HAL_I2C_Init+0x1dc>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d111      	bne.n	8001464 <HAL_I2C_Init+0x168>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1e58      	subs	r0, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	440b      	add	r3, r1
 800144e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001452:	3301      	adds	r3, #1
 8001454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	e012      	b.n	800148a <HAL_I2C_Init+0x18e>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1e58      	subs	r0, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	0099      	lsls	r1, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	fbb0 f3f3 	udiv	r3, r0, r3
 800147a:	3301      	adds	r3, #1
 800147c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Init+0x196>
 800148e:	2301      	movs	r3, #1
 8001490:	e022      	b.n	80014d8 <HAL_I2C_Init+0x1dc>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10e      	bne.n	80014b8 <HAL_I2C_Init+0x1bc>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1e58      	subs	r0, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6859      	ldr	r1, [r3, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	440b      	add	r3, r1
 80014a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ac:	3301      	adds	r3, #1
 80014ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b6:	e00f      	b.n	80014d8 <HAL_I2C_Init+0x1dc>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1e58      	subs	r0, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	0099      	lsls	r1, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	6809      	ldr	r1, [r1, #0]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69da      	ldr	r2, [r3, #28]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001506:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6911      	ldr	r1, [r2, #16]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68d2      	ldr	r2, [r2, #12]
 8001512:	4311      	orrs	r1, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	430b      	orrs	r3, r1
 800151a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2220      	movs	r2, #32
 8001552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	000186a0 	.word	0x000186a0
 8001574:	001e847f 	.word	0x001e847f
 8001578:	003d08ff 	.word	0x003d08ff
 800157c:	431bde83 	.word	0x431bde83
 8001580:	10624dd3 	.word	0x10624dd3

08001584 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	461a      	mov	r2, r3
 8001590:	460b      	mov	r3, r1
 8001592:	817b      	strh	r3, [r7, #10]
 8001594:	4613      	mov	r3, r2
 8001596:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff fc22 	bl	8000de0 <HAL_GetTick>
 800159c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b20      	cmp	r3, #32
 80015a8:	f040 80e0 	bne.w	800176c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2319      	movs	r3, #25
 80015b2:	2201      	movs	r2, #1
 80015b4:	4970      	ldr	r1, [pc, #448]	; (8001778 <HAL_I2C_Master_Transmit+0x1f4>)
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fa92 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015c2:	2302      	movs	r3, #2
 80015c4:	e0d3      	b.n	800176e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_I2C_Master_Transmit+0x50>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e0cc      	b.n	800176e <HAL_I2C_Master_Transmit+0x1ea>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d007      	beq.n	80015fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001608:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2221      	movs	r2, #33	; 0x21
 800160e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2210      	movs	r2, #16
 8001616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	893a      	ldrh	r2, [r7, #8]
 800162a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001630:	b29a      	uxth	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4a50      	ldr	r2, [pc, #320]	; (800177c <HAL_I2C_Master_Transmit+0x1f8>)
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800163c:	8979      	ldrh	r1, [r7, #10]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	6a3a      	ldr	r2, [r7, #32]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f9ca 	bl	80019dc <I2C_MasterRequestWrite>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e08d      	b.n	800176e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001668:	e066      	b.n	8001738 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fb0c 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00d      	beq.n	8001696 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b04      	cmp	r3, #4
 8001680:	d107      	bne.n	8001692 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001690:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06b      	b.n	800176e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d11b      	bne.n	800170c <HAL_I2C_Master_Transmit+0x188>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d017      	beq.n	800170c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6a39      	ldr	r1, [r7, #32]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fafc 	bl	8001d0e <I2C_WaitOnBTFFlagUntilTimeout>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00d      	beq.n	8001738 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	2b04      	cmp	r3, #4
 8001722:	d107      	bne.n	8001734 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001732:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e01a      	b.n	800176e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	2b00      	cmp	r3, #0
 800173e:	d194      	bne.n	800166a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800174e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2220      	movs	r2, #32
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	e000      	b.n	800176e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800176c:	2302      	movs	r3, #2
  }
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	00100002 	.word	0x00100002
 800177c:	ffff0000 	.word	0xffff0000

08001780 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	460b      	mov	r3, r1
 800178e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff fb26 	bl	8000de0 <HAL_GetTick>
 8001794:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	f040 8111 	bne.w	80019ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2319      	movs	r3, #25
 80017ae:	2201      	movs	r2, #1
 80017b0:	4988      	ldr	r1, [pc, #544]	; (80019d4 <HAL_I2C_IsDeviceReady+0x254>)
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f994 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80017be:	2302      	movs	r3, #2
 80017c0:	e104      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_I2C_IsDeviceReady+0x50>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0fd      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x24c>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d007      	beq.n	80017f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001804:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2224      	movs	r2, #36	; 0x24
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a70      	ldr	r2, [pc, #448]	; (80019d8 <HAL_I2C_IsDeviceReady+0x258>)
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001828:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f952 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00d      	beq.n	800185e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001850:	d103      	bne.n	800185a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e0b6      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800185e:	897b      	ldrh	r3, [r7, #10]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800186c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff fab7 	bl	8000de0 <HAL_GetTick>
 8001872:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b02      	cmp	r3, #2
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001898:	bf0c      	ite	eq
 800189a:	2301      	moveq	r3, #1
 800189c:	2300      	movne	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80018a2:	e025      	b.n	80018f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018a4:	f7ff fa9c 	bl	8000de0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d302      	bcc.n	80018ba <HAL_I2C_IsDeviceReady+0x13a>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	22a0      	movs	r2, #160	; 0xa0
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2ba0      	cmp	r3, #160	; 0xa0
 80018fa:	d005      	beq.n	8001908 <HAL_I2C_IsDeviceReady+0x188>
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_I2C_IsDeviceReady+0x188>
 8001902:	7dbb      	ldrb	r3, [r7, #22]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0cd      	beq.n	80018a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b02      	cmp	r3, #2
 800191c:	d129      	bne.n	8001972 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2319      	movs	r3, #25
 800194a:	2201      	movs	r2, #1
 800194c:	4921      	ldr	r1, [pc, #132]	; (80019d4 <HAL_I2C_IsDeviceReady+0x254>)
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f8c6 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e036      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e02c      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001980:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800198a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2319      	movs	r3, #25
 8001992:	2201      	movs	r2, #1
 8001994:	490f      	ldr	r1, [pc, #60]	; (80019d4 <HAL_I2C_IsDeviceReady+0x254>)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f8a2 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e012      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	3301      	adds	r3, #1
 80019aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f4ff af32 	bcc.w	800181a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2220      	movs	r2, #32
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	00100002 	.word	0x00100002
 80019d8:	ffff0000 	.word	0xffff0000

080019dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	460b      	mov	r3, r1
 80019ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d006      	beq.n	8001a06 <I2C_MasterRequestWrite+0x2a>
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <I2C_MasterRequestWrite+0x2a>
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a04:	d108      	bne.n	8001a18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00b      	b.n	8001a30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	2b12      	cmp	r3, #18
 8001a1e:	d107      	bne.n	8001a30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f84f 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a56:	d103      	bne.n	8001a60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e035      	b.n	8001ad0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a6c:	d108      	bne.n	8001a80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	e01b      	b.n	8001ab8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a80:	897b      	ldrh	r3, [r7, #10]
 8001a82:	11db      	asrs	r3, r3, #7
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f003 0306 	and.w	r3, r3, #6
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f063 030f 	orn	r3, r3, #15
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <I2C_MasterRequestWrite+0xfc>)
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f875 	bl	8001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e010      	b.n	8001ad0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <I2C_MasterRequestWrite+0x100>)
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f865 	bl	8001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	00010008 	.word	0x00010008
 8001adc:	00010002 	.word	0x00010002

08001ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af0:	e025      	b.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d021      	beq.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afa:	f7ff f971 	bl	8000de0 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d302      	bcc.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d116      	bne.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f043 0220 	orr.w	r2, r3, #32
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e023      	b.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10d      	bne.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4013      	ands	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf0c      	ite	eq
 8001b5a:	2301      	moveq	r3, #1
 8001b5c:	2300      	movne	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	e00c      	b.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d0b6      	beq.n	8001af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b9c:	e051      	b.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bac:	d123      	bne.n	8001bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f043 0204 	orr.w	r2, r3, #4
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e046      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d021      	beq.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfe:	f7ff f8ef 	bl	8000de0 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d302      	bcc.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d116      	bne.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f043 0220 	orr.w	r2, r3, #32
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e020      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10c      	bne.n	8001c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4013      	ands	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf14      	ite	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	2300      	moveq	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e00b      	b.n	8001c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4013      	ands	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d18d      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c98:	e02d      	b.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f878 	bl	8001d90 <I2C_IsAcknowledgeFailed>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e02d      	b.n	8001d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d021      	beq.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7ff f895 	bl	8000de0 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d116      	bne.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e007      	b.n	8001d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d1ca      	bne.n	8001c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d1a:	e02d      	b.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f837 	bl	8001d90 <I2C_IsAcknowledgeFailed>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e02d      	b.n	8001d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d32:	d021      	beq.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d34:	f7ff f854 	bl	8000de0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e007      	b.n	8001d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d1ca      	bne.n	8001d1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da6:	d11b      	bne.n	8001de0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001db0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f043 0204 	orr.w	r2, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e267      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d075      	beq.n	8001efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d00c      	beq.n	8001e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d112      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4b82      	ldr	r3, [pc, #520]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e32:	d10b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	4b7e      	ldr	r3, [pc, #504]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d05b      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x108>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d157      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e242      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d106      	bne.n	8001e64 <HAL_RCC_OscConfig+0x74>
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e01d      	b.n	8001ea0 <HAL_RCC_OscConfig+0xb0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x98>
 8001e6e:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6f      	ldr	r2, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6c      	ldr	r2, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xb0>
 8001e88:	4b69      	ldr	r3, [pc, #420]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a68      	ldr	r2, [pc, #416]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a65      	ldr	r2, [pc, #404]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7fe ff9a 	bl	8000de0 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7fe ff96 	bl	8000de0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e207      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xc0>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ff86 	bl	8000de0 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7fe ff82 	bl	8000de0 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1f3      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4b51      	ldr	r3, [pc, #324]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xe8>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d063      	beq.n	8001fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b44      	ldr	r3, [pc, #272]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x152>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1c7      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4937      	ldr	r1, [pc, #220]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_RCC_OscConfig+0x244>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe ff3b 	bl	8000de0 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7fe ff37 	bl	8000de0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1a8      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4925      	ldr	r1, [pc, #148]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_OscConfig+0x244>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe ff1a 	bl	8000de0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7fe ff16 	bl	8000de0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e187      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d036      	beq.n	8002048 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_RCC_OscConfig+0x248>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7fe fefa 	bl	8000de0 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7fe fef6 	bl	8000de0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e167      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8002004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x200>
 800200e:	e01b      	b.n	8002048 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x248>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe fee3 	bl	8000de0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e00e      	b.n	800203c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7fe fedf 	bl	8000de0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d907      	bls.n	800203c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e150      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
 8002030:	40023800 	.word	0x40023800
 8002034:	42470000 	.word	0x42470000
 8002038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ea      	bne.n	800201e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8097 	beq.w	8002184 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b81      	ldr	r3, [pc, #516]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b7d      	ldr	r3, [pc, #500]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a7c      	ldr	r2, [pc, #496]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b7a      	ldr	r3, [pc, #488]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b77      	ldr	r3, [pc, #476]	; (8002264 <HAL_RCC_OscConfig+0x474>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b74      	ldr	r3, [pc, #464]	; (8002264 <HAL_RCC_OscConfig+0x474>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a73      	ldr	r2, [pc, #460]	; (8002264 <HAL_RCC_OscConfig+0x474>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7fe fe9f 	bl	8000de0 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe fe9b 	bl	8000de0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e10c      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0x474>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x2ea>
 80020cc:	4b64      	ldr	r3, [pc, #400]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	4a63      	ldr	r2, [pc, #396]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x324>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x30c>
 80020e2:	4b5f      	ldr	r3, [pc, #380]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a5e      	ldr	r2, [pc, #376]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
 80020ee:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a5b      	ldr	r2, [pc, #364]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0x324>
 80020fc:	4b58      	ldr	r3, [pc, #352]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a57      	ldr	r2, [pc, #348]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	4b55      	ldr	r3, [pc, #340]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d015      	beq.n	8002148 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7fe fe60 	bl	8000de0 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe fe5c 	bl	8000de0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0cb      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ee      	beq.n	8002124 <HAL_RCC_OscConfig+0x334>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7fe fe4a 	bl	8000de0 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe fe46 	bl	8000de0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0b5      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ee      	bne.n	8002150 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4a38      	ldr	r2, [pc, #224]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a1 	beq.w	80022d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b08      	cmp	r3, #8
 8002198:	d05c      	beq.n	8002254 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d141      	bne.n	8002226 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_RCC_OscConfig+0x478>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe1a 	bl	8000de0 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fe16 	bl	8000de0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e087      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	019b      	lsls	r3, r3, #6
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	3b01      	subs	r3, #1
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	491b      	ldr	r1, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x478>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fdef 	bl	8000de0 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fdeb 	bl	8000de0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e05c      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x416>
 8002224:	e054      	b.n	80022d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_RCC_OscConfig+0x478>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fdd8 	bl	8000de0 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe fdd4 	bl	8000de0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e045      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x444>
 8002252:	e03d      	b.n	80022d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e038      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
 8002260:	40023800 	.word	0x40023800
 8002264:	40007000 	.word	0x40007000
 8002268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x4ec>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d028      	beq.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d121      	bne.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d11a      	bne.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d111      	bne.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	3b01      	subs	r3, #1
 80022b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800

080022e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0cc      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d90c      	bls.n	800231c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0b8      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002334:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a58      	ldr	r2, [pc, #352]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800233e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a52      	ldr	r2, [pc, #328]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	494d      	ldr	r1, [pc, #308]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d044      	beq.n	8002400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d119      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e07f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d003      	beq.n	800239e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	2b03      	cmp	r3, #3
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b3f      	ldr	r3, [pc, #252]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e067      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b37      	ldr	r3, [pc, #220]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4934      	ldr	r1, [pc, #208]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fd06 	bl	8000de0 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe fd02 	bl	8000de0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e04f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d20c      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e032      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4916      	ldr	r1, [pc, #88]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	490e      	ldr	r1, [pc, #56]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002466:	f000 f821 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 800246a:	4602      	mov	r2, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	490a      	ldr	r1, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	5ccb      	ldrb	r3, [r1, r3]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fc66 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023c00 	.word	0x40023c00
 800249c:	40023800 	.word	0x40023800
 80024a0:	08002b68 	.word	0x08002b68
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000004 	.word	0x20000004

080024ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b0:	b094      	sub	sp, #80	; 0x50
 80024b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	647b      	str	r3, [r7, #68]	; 0x44
 80024b8:	2300      	movs	r3, #0
 80024ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024bc:	2300      	movs	r3, #0
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c4:	4b79      	ldr	r3, [pc, #484]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d00d      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x40>
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	f200 80e1 	bhi.w	8002698 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x34>
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024de:	e0db      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80024e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024e4:	e0db      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024e6:	4b73      	ldr	r3, [pc, #460]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80024e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024ea:	e0d8      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ec:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002502:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	099b      	lsrs	r3, r3, #6
 8002508:	2200      	movs	r2, #0
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
 800250c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
 800251a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800251e:	4622      	mov	r2, r4
 8002520:	462b      	mov	r3, r5
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	0159      	lsls	r1, r3, #5
 800252c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002530:	0150      	lsls	r0, r2, #5
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4621      	mov	r1, r4
 8002538:	1a51      	subs	r1, r2, r1
 800253a:	6139      	str	r1, [r7, #16]
 800253c:	4629      	mov	r1, r5
 800253e:	eb63 0301 	sbc.w	r3, r3, r1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002550:	4659      	mov	r1, fp
 8002552:	018b      	lsls	r3, r1, #6
 8002554:	4651      	mov	r1, sl
 8002556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800255a:	4651      	mov	r1, sl
 800255c:	018a      	lsls	r2, r1, #6
 800255e:	4651      	mov	r1, sl
 8002560:	ebb2 0801 	subs.w	r8, r2, r1
 8002564:	4659      	mov	r1, fp
 8002566:	eb63 0901 	sbc.w	r9, r3, r1
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800257a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800257e:	4690      	mov	r8, r2
 8002580:	4699      	mov	r9, r3
 8002582:	4623      	mov	r3, r4
 8002584:	eb18 0303 	adds.w	r3, r8, r3
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	462b      	mov	r3, r5
 800258c:	eb49 0303 	adc.w	r3, r9, r3
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800259e:	4629      	mov	r1, r5
 80025a0:	024b      	lsls	r3, r1, #9
 80025a2:	4621      	mov	r1, r4
 80025a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025a8:	4621      	mov	r1, r4
 80025aa:	024a      	lsls	r2, r1, #9
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	2200      	movs	r2, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025bc:	f7fd fe04 	bl	80001c8 <__aeabi_uldivmod>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4613      	mov	r3, r2
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c8:	e058      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	2200      	movs	r2, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	4611      	mov	r1, r2
 80025d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
 80025e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025e4:	4642      	mov	r2, r8
 80025e6:	464b      	mov	r3, r9
 80025e8:	f04f 0000 	mov.w	r0, #0
 80025ec:	f04f 0100 	mov.w	r1, #0
 80025f0:	0159      	lsls	r1, r3, #5
 80025f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f6:	0150      	lsls	r0, r2, #5
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4641      	mov	r1, r8
 80025fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002602:	4649      	mov	r1, r9
 8002604:	eb63 0b01 	sbc.w	fp, r3, r1
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002614:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002618:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800261c:	ebb2 040a 	subs.w	r4, r2, sl
 8002620:	eb63 050b 	sbc.w	r5, r3, fp
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	00eb      	lsls	r3, r5, #3
 800262e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002632:	00e2      	lsls	r2, r4, #3
 8002634:	4614      	mov	r4, r2
 8002636:	461d      	mov	r5, r3
 8002638:	4643      	mov	r3, r8
 800263a:	18e3      	adds	r3, r4, r3
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	464b      	mov	r3, r9
 8002640:	eb45 0303 	adc.w	r3, r5, r3
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002652:	4629      	mov	r1, r5
 8002654:	028b      	lsls	r3, r1, #10
 8002656:	4621      	mov	r1, r4
 8002658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800265c:	4621      	mov	r1, r4
 800265e:	028a      	lsls	r2, r1, #10
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002666:	2200      	movs	r2, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	61fa      	str	r2, [r7, #28]
 800266c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002670:	f7fd fdaa 	bl	80001c8 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4613      	mov	r3, r2
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800268c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800268e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002696:	e002      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800269a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800269c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3750      	adds	r7, #80	; 0x50
 80026a4:	46bd      	mov	sp, r7
 80026a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	007a1200 	.word	0x007a1200

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0a9b      	lsrs	r3, r3, #10
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08002b78 	.word	0x08002b78

080026f8 <__libc_init_array>:
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4d0d      	ldr	r5, [pc, #52]	; (8002730 <__libc_init_array+0x38>)
 80026fc:	4c0d      	ldr	r4, [pc, #52]	; (8002734 <__libc_init_array+0x3c>)
 80026fe:	1b64      	subs	r4, r4, r5
 8002700:	10a4      	asrs	r4, r4, #2
 8002702:	2600      	movs	r6, #0
 8002704:	42a6      	cmp	r6, r4
 8002706:	d109      	bne.n	800271c <__libc_init_array+0x24>
 8002708:	4d0b      	ldr	r5, [pc, #44]	; (8002738 <__libc_init_array+0x40>)
 800270a:	4c0c      	ldr	r4, [pc, #48]	; (800273c <__libc_init_array+0x44>)
 800270c:	f000 f820 	bl	8002750 <_init>
 8002710:	1b64      	subs	r4, r4, r5
 8002712:	10a4      	asrs	r4, r4, #2
 8002714:	2600      	movs	r6, #0
 8002716:	42a6      	cmp	r6, r4
 8002718:	d105      	bne.n	8002726 <__libc_init_array+0x2e>
 800271a:	bd70      	pop	{r4, r5, r6, pc}
 800271c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002720:	4798      	blx	r3
 8002722:	3601      	adds	r6, #1
 8002724:	e7ee      	b.n	8002704 <__libc_init_array+0xc>
 8002726:	f855 3b04 	ldr.w	r3, [r5], #4
 800272a:	4798      	blx	r3
 800272c:	3601      	adds	r6, #1
 800272e:	e7f2      	b.n	8002716 <__libc_init_array+0x1e>
 8002730:	08002b88 	.word	0x08002b88
 8002734:	08002b88 	.word	0x08002b88
 8002738:	08002b88 	.word	0x08002b88
 800273c:	08002b8c 	.word	0x08002b8c

08002740 <memset>:
 8002740:	4402      	add	r2, r0
 8002742:	4603      	mov	r3, r0
 8002744:	4293      	cmp	r3, r2
 8002746:	d100      	bne.n	800274a <memset+0xa>
 8002748:	4770      	bx	lr
 800274a:	f803 1b01 	strb.w	r1, [r3], #1
 800274e:	e7f9      	b.n	8002744 <memset+0x4>

08002750 <_init>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	bf00      	nop
 8002754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002756:	bc08      	pop	{r3}
 8002758:	469e      	mov	lr, r3
 800275a:	4770      	bx	lr

0800275c <_fini>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	bf00      	nop
 8002760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002762:	bc08      	pop	{r3}
 8002764:	469e      	mov	lr, r3
 8002766:	4770      	bx	lr
