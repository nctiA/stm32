
ESP_DATA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f8  080041f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004200  08004200  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000168  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a027  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a31  00000000  00000000  0002a0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000750  00000000  00000000  0002c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b14  00000000  00000000  0002ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a737  00000000  00000000  0004e554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf45f  00000000  00000000  00058c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001280ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000248c  00000000  00000000  0012813c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800406c 	.word	0x0800406c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800406c 	.word	0x0800406c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fa01 	bl	80001d0 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e007      	b.n	8000de8 <bufclr+0x28>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf3      	blt.n	8000dd8 <bufclr+0x18>
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b096      	sub	sp, #88	; 0x58
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000e06:	f000 f933 	bl	8001070 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8000e0a:	4823      	ldr	r0, [pc, #140]	; (8000e98 <ESP_Init+0x9c>)
 8000e0c:	f000 f9fa 	bl	8001204 <Uart_sendstring>
	HAL_Delay(1000);
 8000e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e14:	f000 fe50 	bl	8001ab8 <HAL_Delay>

	Uart_flush();
 8000e18:	f000 f972 	bl	8001100 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8000e1c:	481f      	ldr	r0, [pc, #124]	; (8000e9c <ESP_Init+0xa0>)
 8000e1e:	f000 f9f1 	bl	8001204 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000e22:	bf00      	nop
 8000e24:	481e      	ldr	r0, [pc, #120]	; (8000ea0 <ESP_Init+0xa4>)
 8000e26:	f000 fa1d 	bl	8001264 <Wait_for>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f9      	beq.n	8000e24 <ESP_Init+0x28>

	Uart_flush();
 8000e30:	f000 f966 	bl	8001100 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000e34:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <ESP_Init+0xa8>)
 8000e36:	f000 f9e5 	bl	8001204 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000e3a:	bf00      	nop
 8000e3c:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <ESP_Init+0xa4>)
 8000e3e:	f000 fa11 	bl	8001264 <Wait_for>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f9      	beq.n	8000e3c <ESP_Init+0x40>

	Uart_flush();
 8000e48:	f000 f95a 	bl	8001100 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000e4c:	f107 0008 	add.w	r0, r7, #8
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	4914      	ldr	r1, [pc, #80]	; (8000ea8 <ESP_Init+0xac>)
 8000e56:	f002 fc8d 	bl	8003774 <siprintf>
	Uart_sendstring(data);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f9d0 	bl	8001204 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8000e64:	bf00      	nop
 8000e66:	4811      	ldr	r0, [pc, #68]	; (8000eac <ESP_Init+0xb0>)
 8000e68:	f000 f9fc 	bl	8001264 <Wait_for>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f9      	beq.n	8000e66 <ESP_Init+0x6a>

	Uart_flush();
 8000e72:	f000 f945 	bl	8001100 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <ESP_Init+0xb4>)
 8000e78:	f000 f9c4 	bl	8001204 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000e7c:	bf00      	nop
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <ESP_Init+0xa4>)
 8000e80:	f000 f9f0 	bl	8001264 <Wait_for>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f9      	beq.n	8000e7e <ESP_Init+0x82>

	Uart_flush();
 8000e8a:	f000 f939 	bl	8001100 <Uart_flush>

}
 8000e8e:	bf00      	nop
 8000e90:	3758      	adds	r7, #88	; 0x58
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08004084 	.word	0x08004084
 8000e9c:	08004090 	.word	0x08004090
 8000ea0:	08004098 	.word	0x08004098
 8000ea4:	080040a0 	.word	0x080040a0
 8000ea8:	080040b0 	.word	0x080040b0
 8000eac:	080040c8 	.word	0x080040c8
 8000eb0:	080040d4 	.word	0x080040d4

08000eb4 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ec0:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000ec4:	6018      	str	r0, [r3, #0]
 8000ec6:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000eca:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000ece:	6019      	str	r1, [r3, #0]
 8000ed0:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ed4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000ed8:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8000eda:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fc38 	bl	8003764 <memset>
	char local_buf2[30] = {0};
 8000ef4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000ef8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 8000f12:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f16:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	22c4      	movs	r2, #196	; 0xc4
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 fc1d 	bl	8003764 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8000f2a:	4848      	ldr	r0, [pc, #288]	; (800104c <ESP_Send_Multi+0x198>)
 8000f2c:	f000 f96a 	bl	8001204 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000f30:	bf00      	nop
 8000f32:	4847      	ldr	r0, [pc, #284]	; (8001050 <ESP_Send_Multi+0x19c>)
 8000f34:	f000 f996 	bl	8001264 <Wait_for>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <ESP_Send_Multi+0x7e>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 8000f3e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f42:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8000f46:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4941      	ldr	r1, [pc, #260]	; (8001054 <ESP_Send_Multi+0x1a0>)
 8000f4e:	f002 fc11 	bl	8003774 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000f58:	e01f      	b.n	8000f9a <ESP_Send_Multi+0xe6>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 8000f5a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000f5e:	1c59      	adds	r1, r3, #1
 8000f60:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8000f6a:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	f107 0014 	add.w	r0, r7, #20
 8000f78:	460a      	mov	r2, r1
 8000f7a:	4937      	ldr	r1, [pc, #220]	; (8001058 <ESP_Send_Multi+0x1a4>)
 8000f7c:	f002 fbfa 	bl	8003774 <siprintf>
		strcat (local_buf, field_buf);
 8000f80:	f107 0214 	add.w	r2, r7, #20
 8000f84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fc12 	bl	80037b4 <strcat>
	for (int i=0; i<numberoffileds; i++)
 8000f90:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000f94:	3301      	adds	r3, #1
 8000f96:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000f9a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000f9e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000fa2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbd6      	blt.n	8000f5a <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 8000fac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f90d 	bl	80001d0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a26      	ldr	r2, [pc, #152]	; (800105c <ESP_Send_Multi+0x1a8>)
 8000fc2:	8811      	ldrh	r1, [r2, #0]
 8000fc4:	7892      	ldrb	r2, [r2, #2]
 8000fc6:	8019      	strh	r1, [r3, #0]
 8000fc8:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 8000fca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f8fe 	bl	80001d0 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8000fda:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fde:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 8000fe2:	491f      	ldr	r1, [pc, #124]	; (8001060 <ESP_Send_Multi+0x1ac>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fbc5 	bl	8003774 <siprintf>
	Uart_sendstring(local_buf2);
 8000fea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f908 	bl	8001204 <Uart_sendstring>
	while (!(Wait_for(">")));
 8000ff4:	bf00      	nop
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <ESP_Send_Multi+0x1b0>)
 8000ff8:	f000 f934 	bl	8001264 <Wait_for>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f9      	beq.n	8000ff6 <ESP_Send_Multi+0x142>

	Uart_sendstring (local_buf);
 8001002:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f8fc 	bl	8001204 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 800100c:	bf00      	nop
 800100e:	4816      	ldr	r0, [pc, #88]	; (8001068 <ESP_Send_Multi+0x1b4>)
 8001010:	f000 f928 	bl	8001264 <Wait_for>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ESP_Send_Multi+0x15a>

	while (!(Wait_for("CLOSED")));
 800101a:	bf00      	nop
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <ESP_Send_Multi+0x1b8>)
 800101e:	f000 f921 	bl	8001264 <Wait_for>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f9      	beq.n	800101c <ESP_Send_Multi+0x168>

	bufclr(local_buf);
 8001028:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fec7 	bl	8000dc0 <bufclr>
	bufclr(local_buf2);
 8001032:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fec2 	bl	8000dc0 <bufclr>

	Ringbuf_init();
 800103c:	f000 f818 	bl	8001070 <Ringbuf_init>

}
 8001040:	bf00      	nop
 8001042:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	080040e4 	.word	0x080040e4
 8001050:	08004098 	.word	0x08004098
 8001054:	0800415c 	.word	0x0800415c
 8001058:	08004174 	.word	0x08004174
 800105c:	08004180 	.word	0x08004180
 8001060:	08004134 	.word	0x08004134
 8001064:	08004144 	.word	0x08004144
 8001068:	08004148 	.word	0x08004148
 800106c:	08004154 	.word	0x08004154

08001070 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <Ringbuf_init+0x3c>)
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <Ringbuf_init+0x40>)
 8001078:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <Ringbuf_init+0x44>)
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <Ringbuf_init+0x48>)
 800107e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <Ringbuf_init+0x4c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <Ringbuf_init+0x4c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <Ringbuf_init+0x4c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <Ringbuf_init+0x4c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0220 	orr.w	r2, r2, #32
 800109e:	60da      	str	r2, [r3, #12]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000011c 	.word	0x2000011c
 80010b0:	2000008c 	.word	0x2000008c
 80010b4:	20000120 	.word	0x20000120
 80010b8:	200000d4 	.word	0x200000d4
 80010bc:	2000016c 	.word	0x2000016c

080010c0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	3301      	adds	r3, #1
 80010d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010d6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d007      	beq.n	80010f2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	79f9      	ldrb	r1, [r7, #7]
 80010ea:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <Uart_flush>:

void Uart_flush (void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <Uart_flush+0x1c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <Uart_flush+0x1c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000011c 	.word	0x2000011c

08001120 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <Uart_read+0x4c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <Uart_read+0x4c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	429a      	cmp	r2, r3
 8001134:	d102      	bne.n	800113c <Uart_read+0x1c>
  {
    return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e010      	b.n	800115e <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <Uart_read+0x4c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <Uart_read+0x4c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <Uart_read+0x4c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <Uart_read+0x4c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800115c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000011c 	.word	0x2000011c

08001170 <Uart_write>:

void Uart_write(int c)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db21      	blt.n	80011c2 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <Uart_write+0x60>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	3301      	adds	r3, #1
 8001186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800118a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800118c:	bf00      	nop
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <Uart_write+0x60>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	d0f9      	beq.n	800118e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <Uart_write+0x60>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <Uart_write+0x60>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	b2c9      	uxtb	r1, r1
 80011a8:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <Uart_write+0x60>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <Uart_write+0x64>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <Uart_write+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011c0:	60da      	str	r2, [r3, #12]
	}
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000120 	.word	0x20000120
 80011d4:	2000016c 	.word	0x2000016c

080011d8 <IsDataAvailable>:

int IsDataAvailable(void) {
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
    return (uint16_t)(UART_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % UART_BUFFER_SIZE;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <IsDataAvailable+0x28>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <IsDataAvailable+0x28>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3340      	adds	r3, #64	; 0x40
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000008c 	.word	0x2000008c

08001204 <Uart_sendstring>:


void Uart_sendstring (const char *s)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 800120c:	e006      	b.n	800121c <Uart_sendstring+0x18>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffaa 	bl	8001170 <Uart_write>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f4      	bne.n	800120e <Uart_sendstring+0xa>
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <Uart_peek+0x30>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <Uart_peek+0x30>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	429a      	cmp	r2, r3
 8001242:	d102      	bne.n	800124a <Uart_peek+0x1a>
  {
    return -1;
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	e005      	b.n	8001256 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <Uart_peek+0x30>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <Uart_peek+0x30>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	2000011c 	.word	0x2000011c

08001264 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7fe ffad 	bl	80001d0 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 800127a:	bf00      	nop
 800127c:	f7ff ffac 	bl	80011d8 <IsDataAvailable>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0fa      	beq.n	800127c <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8001286:	f7ff ffd3 	bl	8001230 <Uart_peek>
 800128a:	4601      	mov	r1, r0
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4299      	cmp	r1, r3
 8001296:	d01a      	beq.n	80012ce <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <Wait_for+0xa4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <Wait_for+0xa4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 80012aa:	e7e6      	b.n	800127a <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
		Uart_read();
 80012b2:	f7ff ff35 	bl	8001120 <Uart_read>
		if (so_far == len) return 1;
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d101      	bne.n	80012c2 <Wait_for+0x5e>
 80012be:	2301      	movs	r3, #1
 80012c0:	e01d      	b.n	80012fe <Wait_for+0x9a>
		while (!IsDataAvailable());
 80012c2:	bf00      	nop
 80012c4:	f7ff ff88 	bl	80011d8 <IsDataAvailable>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0fa      	beq.n	80012c4 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 80012ce:	f7ff ffaf 	bl	8001230 <Uart_peek>
 80012d2:	4601      	mov	r1, r0
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4299      	cmp	r1, r3
 80012de:	d0e5      	beq.n	80012ac <Wait_for+0x48>
	}

	if (so_far != len)
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d002      	beq.n	80012ee <Wait_for+0x8a>
	{
		so_far = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
		goto again;
 80012ec:	e7c5      	b.n	800127a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d101      	bne.n	80012fa <Wait_for+0x96>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e001      	b.n	80012fe <Wait_for+0x9a>
	else return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000011c 	.word	0x2000011c

0800130c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	2b00      	cmp	r3, #0
 800132c:	d013      	beq.n	8001356 <Uart_isr+0x4a>
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	f003 0320 	and.w	r3, r3, #32
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00e      	beq.n	8001356 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <Uart_isr+0xac>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff feb6 	bl	80010c0 <store_char>
        return;
 8001354:	e02c      	b.n	80013b0 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135c:	2b00      	cmp	r3, #0
 800135e:	d027      	beq.n	80013b0 <Uart_isr+0xa4>
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	2b00      	cmp	r3, #0
 8001368:	d022      	beq.n	80013b0 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <Uart_isr+0xb0>)
 800136c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <Uart_isr+0xb0>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	429a      	cmp	r2, r3
 8001374:	d108      	bne.n	8001388 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001384:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001386:	e012      	b.n	80013ae <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <Uart_isr+0xb0>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <Uart_isr+0xb0>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <Uart_isr+0xb0>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	3301      	adds	r3, #1
 8001398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <Uart_isr+0xb0>)
 800139e:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	7bba      	ldrb	r2, [r7, #14]
 80013ac:	605a      	str	r2, [r3, #4]
    	return;
 80013ae:	bf00      	nop
    }
}
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000011c 	.word	0x2000011c
 80013bc:	200000d4 	.word	0x200000d4

080013c0 <ADC_Get_Value>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_Get_Value (void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	uint16_t val = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 80013ca:	480a      	ldr	r0, [pc, #40]	; (80013f4 <ADC_Get_Value+0x34>)
 80013cc:	f000 fbdc 	bl	8001b88 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80013d0:	2164      	movs	r1, #100	; 0x64
 80013d2:	4808      	ldr	r0, [pc, #32]	; (80013f4 <ADC_Get_Value+0x34>)
 80013d4:	f000 fcdd 	bl	8001d92 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc1);
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <ADC_Get_Value+0x34>)
 80013da:	f000 fd65 	bl	8001ea8 <HAL_ADC_GetValue>
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 80013e2:	4804      	ldr	r0, [pc, #16]	; (80013f4 <ADC_Get_Value+0x34>)
 80013e4:	f000 fca2 	bl	8001d2c <HAL_ADC_Stop>
	return val;
 80013e8:	88fb      	ldrh	r3, [r7, #6]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000124 	.word	0x20000124

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fc:	f000 faea 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001400:	f000 f872 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001404:	f000 f956 	bl	80016b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001408:	f000 f8d8 	bl	80015bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800140c:	f000 f928 	bl	8001660 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("Necoooo", "12345678");
 8001410:	492d      	ldr	r1, [pc, #180]	; (80014c8 <main+0xd0>)
 8001412:	482e      	ldr	r0, [pc, #184]	; (80014cc <main+0xd4>)
 8001414:	f7ff fcf2 	bl	8000dfc <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_Value = ADC_Get_Value();
 8001418:	f7ff ffd2 	bl	80013c0 <ADC_Get_Value>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <main+0xd8>)
 8001422:	801a      	strh	r2, [r3, #0]
	  	  Voltage = ((float) ADC_Value * 5.0 / 1023);
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <main+0xd8>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001430:	ee17 0a90 	vmov	r0, s15
 8001434:	f7ff f888 	bl	8000548 <__aeabi_f2d>
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <main+0xdc>)
 800143e:	f7ff f8db 	bl	80005f8 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	a31d      	add	r3, pc, #116	; (adr r3, 80014c0 <main+0xc8>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f9fc 	bl	800084c <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fade 	bl	8000a1c <__aeabi_d2f>
 8001460:	4603      	mov	r3, r0
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <main+0xe0>)
 8001464:	6013      	str	r3, [r2, #0]
	  	  count++;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <main+0xe4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <main+0xe4>)
 8001470:	701a      	strb	r2, [r3, #0]

	  	  Value_Buf[0] = ADC_Value;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <main+0xd8>)
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <main+0xe8>)
 8001478:	801a      	strh	r2, [r3, #0]
	  	  Value_Buf[1] = count;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <main+0xe4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <main+0xe8>)
 8001482:	805a      	strh	r2, [r3, #2]
	  	  Value_Buf[2] = count*2;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <main+0xe4>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <main+0xe8>)
 8001490:	809a      	strh	r2, [r3, #4]
	  	  Value_Buf[3] = Voltage;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <main+0xe0>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149c:	ee17 3a90 	vmov	r3, s15
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <main+0xe8>)
 80014a4:	80da      	strh	r2, [r3, #6]

	  	  ESP_Send_Multi("ODSL91KDMUCTAGQD", 4, Value_Buf);
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <main+0xe8>)
 80014a8:	2104      	movs	r1, #4
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <main+0xec>)
 80014ac:	f7ff fd02 	bl	8000eb4 <ESP_Send_Multi>

	  	  HAL_Delay(15000);
 80014b0:	f643 2098 	movw	r0, #15000	; 0x3a98
 80014b4:	f000 fb00 	bl	8001ab8 <HAL_Delay>
	  ADC_Value = ADC_Get_Value();
 80014b8:	e7ae      	b.n	8001418 <main+0x20>
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w
 80014c0:	00000000 	.word	0x00000000
 80014c4:	408ff800 	.word	0x408ff800
 80014c8:	08004184 	.word	0x08004184
 80014cc:	08004190 	.word	0x08004190
 80014d0:	200001b4 	.word	0x200001b4
 80014d4:	40140000 	.word	0x40140000
 80014d8:	200001b0 	.word	0x200001b0
 80014dc:	200001b6 	.word	0x200001b6
 80014e0:	200001b8 	.word	0x200001b8
 80014e4:	08004198 	.word	0x08004198

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	; 0x50
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	2230      	movs	r2, #48	; 0x30
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 f934 	bl	8003764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <SystemClock_Config+0xcc>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <SystemClock_Config+0xcc>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <SystemClock_Config+0xcc>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <SystemClock_Config+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <SystemClock_Config+0xd0>)
 8001532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <SystemClock_Config+0xd0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001544:	2301      	movs	r3, #1
 8001546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001558:	2308      	movs	r3, #8
 800155a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800155c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001562:	2302      	movs	r3, #2
 8001564:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001566:	2307      	movs	r3, #7
 8001568:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	4618      	mov	r0, r3
 8001570:	f001 f974 	bl	800285c <HAL_RCC_OscConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800157a:	f000 f8c3 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157e:	230f      	movs	r3, #15
 8001580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001582:	2302      	movs	r3, #2
 8001584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800158a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800158e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2105      	movs	r1, #5
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fbd5 	bl	8002d4c <HAL_RCC_ClockConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015a8:	f000 f8ac 	bl	8001704 <Error_Handler>
  }
}
 80015ac:	bf00      	nop
 80015ae:	3750      	adds	r7, #80	; 0x50
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000

080015bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_ADC1_Init+0x98>)
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <MX_ADC1_Init+0x9c>)
 80015d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_ADC1_Init+0x98>)
 80015d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_ADC1_Init+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_ADC1_Init+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_ADC1_Init+0x98>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_ADC1_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_ADC1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_ADC1_Init+0x98>)
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <MX_ADC1_Init+0xa0>)
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_ADC1_Init+0x98>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_ADC1_Init+0x98>)
 800160a:	2201      	movs	r2, #1
 800160c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_ADC1_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_ADC1_Init+0x98>)
 8001618:	2201      	movs	r2, #1
 800161a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_ADC1_Init+0x98>)
 800161e:	f000 fa6f 	bl	8001b00 <HAL_ADC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001628:	f000 f86c 	bl	8001704 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800162c:	2301      	movs	r3, #1
 800162e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001634:	2304      	movs	r3, #4
 8001636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_ADC1_Init+0x98>)
 800163e:	f000 fc41 	bl	8001ec4 <HAL_ADC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001648:	f000 f85c 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000124 	.word	0x20000124
 8001658:	40012000 	.word	0x40012000
 800165c:	0f000001 	.word	0x0f000001

08001660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART1_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART1_UART_Init+0x4c>)
 8001698:	f001 fd78 	bl	800318c <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f000 f82f 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000016c 	.word	0x2000016c
 80016b0:	40011000 	.word	0x40011000

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_GPIO_Init+0x4c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <MX_GPIO_Init+0x4c>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <MX_GPIO_Init+0x4c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_GPIO_Init+0x4c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <MX_GPIO_Init+0x4c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_GPIO_Init+0x4c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	e7fe      	b.n	800170c <Error_Handler+0x8>
	...

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_MspInit+0x4c>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_MspInit+0x4c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800174e:	2007      	movs	r0, #7
 8001750:	f000 fea6 	bl	80024a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_ADC_MspInit+0x7c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d127      	bne.n	80017d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_ADC_MspInit+0x80>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <HAL_ADC_MspInit+0x80>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_ADC_MspInit+0x80>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_ADC_MspInit+0x80>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_ADC_MspInit+0x80>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_ADC_MspInit+0x80>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ba:	2302      	movs	r3, #2
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017be:	2303      	movs	r3, #3
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_ADC_MspInit+0x84>)
 80017ce:	f000 fea9 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40012000 	.word	0x40012000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_UART_MspInit+0x94>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d134      	bne.n	8001874 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_UART_MspInit+0x98>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_UART_MspInit+0x98>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_UART_MspInit+0x98>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_UART_MspInit+0x98>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_UART_MspInit+0x98>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_UART_MspInit+0x98>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001842:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001854:	2307      	movs	r3, #7
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4809      	ldr	r0, [pc, #36]	; (8001884 <HAL_UART_MspInit+0x9c>)
 8001860:	f000 fe60 	bl	8002524 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2025      	movs	r0, #37	; 0x25
 800186a:	f000 fe24 	bl	80024b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800186e:	2025      	movs	r0, #37	; 0x25
 8001870:	f000 fe3d 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40011000 	.word	0x40011000
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>

0800188e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler+0x4>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d4:	f000 f8d0 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <USART1_IRQHandler+0x10>)
 80018e2:	f7ff fd13 	bl	800130c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000016c 	.word	0x2000016c

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f001 fef6 	bl	8003710 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20020000 	.word	0x20020000
 8001950:	00000400 	.word	0x00000400
 8001954:	200001c0 	.word	0x200001c0
 8001958:	200001d8 	.word	0x200001d8

0800195c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019aa:	f7ff ffd7 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f001 feb5 	bl	800371c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fd21 	bl	80013f8 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019c4:	08004208 	.word	0x08004208
  ldr r2, =_sbss
 80019c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019cc:	200001d8 	.word	0x200001d8

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 fd4f 	bl	80024a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fe82 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fd67 	bl	800250a <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 fd2f 	bl	80024b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	200001c4 	.word	0x200001c4

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200001c4 	.word	0x200001c4

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008

08001b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e033      	b.n	8001b7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe1e 	bl	8001760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b46:	f023 0302 	bic.w	r3, r3, #2
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fad8 	bl	8002108 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Start+0x1a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0b2      	b.n	8001d08 <HAL_ADC_Start+0x180>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d018      	beq.n	8001bea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc8:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <HAL_ADC_Start+0x18c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_ADC_Start+0x190>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9a      	lsrs	r2, r3, #18
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d17a      	bne.n	8001cee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c36:	d106      	bne.n	8001c46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f023 0206 	bic.w	r2, r3, #6
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44
 8001c44:	e002      	b.n	8001c4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_ADC_Start+0x194>)
 8001c56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d12a      	bne.n	8001cc4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_ADC_Start+0x198>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d015      	beq.n	8001ca4 <HAL_ADC_Start+0x11c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <HAL_ADC_Start+0x19c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d105      	bne.n	8001c8e <HAL_ADC_Start+0x106>
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_ADC_Start+0x194>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <HAL_ADC_Start+0x1a0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d136      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_ADC_Start+0x194>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d130      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d129      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	e020      	b.n	8001d06 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_ADC_Start+0x198>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d11b      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d114      	bne.n	8001d06 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	e00b      	b.n	8001d06 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000000 	.word	0x20000000
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	40012300 	.word	0x40012300
 8001d20:	40012000 	.word	0x40012000
 8001d24:	40012100 	.word	0x40012100
 8001d28:	40012200 	.word	0x40012200

08001d2c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Stop+0x16>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e021      	b.n	8001d86 <HAL_ADC_Stop+0x5a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dae:	d113      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f043 0220 	orr.w	r2, r3, #32
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e063      	b.n	8001ea0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dd8:	f7ff fe62 	bl	8001aa0 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dde:	e021      	b.n	8001e24 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de6:	d01d      	beq.n	8001e24 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_ADC_PollForConversion+0x6c>
 8001dee:	f7ff fe57 	bl	8001aa0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d212      	bcs.n	8001e24 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d00b      	beq.n	8001e24 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f043 0204 	orr.w	r2, r3, #4
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e03d      	b.n	8001ea0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d1d6      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0212 	mvn.w	r2, #18
 8001e3a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d123      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11f      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d111      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d105      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1c>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e105      	b.n	80020ec <HAL_ADC_ConfigChannel+0x228>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	d925      	bls.n	8001f3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68d9      	ldr	r1, [r3, #12]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	3b1e      	subs	r3, #30
 8001f06:	2207      	movs	r2, #7
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	400a      	ands	r2, r1
 8001f14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68d9      	ldr	r1, [r3, #12]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	4603      	mov	r3, r0
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4403      	add	r3, r0
 8001f2e:	3b1e      	subs	r3, #30
 8001f30:	409a      	lsls	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	e022      	b.n	8001f82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6919      	ldr	r1, [r3, #16]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	2207      	movs	r2, #7
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6919      	ldr	r1, [r3, #16]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4403      	add	r3, r0
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d824      	bhi.n	8001fd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b05      	subs	r3, #5
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b05      	subs	r3, #5
 8001fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd2:	e04c      	b.n	800206e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b0c      	cmp	r3, #12
 8001fda:	d824      	bhi.n	8002026 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b23      	subs	r3, #35	; 0x23
 8001fee:	221f      	movs	r2, #31
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	4618      	mov	r0, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b23      	subs	r3, #35	; 0x23
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
 8002024:	e023      	b.n	800206e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	3b41      	subs	r3, #65	; 0x41
 8002038:	221f      	movs	r2, #31
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	400a      	ands	r2, r1
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	3b41      	subs	r3, #65	; 0x41
 8002062:	fa00 f203 	lsl.w	r2, r0, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_ADC_ConfigChannel+0x234>)
 8002070:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <HAL_ADC_ConfigChannel+0x238>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d109      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1cc>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b12      	cmp	r3, #18
 8002082:	d105      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_ADC_ConfigChannel+0x238>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d123      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x21e>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d003      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x1e6>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b11      	cmp	r3, #17
 80020a8:	d11b      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d111      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_ADC_ConfigChannel+0x23c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_ADC_ConfigChannel+0x240>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	0c9a      	lsrs	r2, r3, #18
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40012300 	.word	0x40012300
 80020fc:	40012000 	.word	0x40012000
 8002100:	20000000 	.word	0x20000000
 8002104:	431bde83 	.word	0x431bde83

08002108 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002110:	4b79      	ldr	r3, [pc, #484]	; (80022f8 <ADC_Init+0x1f0>)
 8002112:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	431a      	orrs	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800213c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	021a      	lsls	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	4a58      	ldr	r2, [pc, #352]	; (80022fc <ADC_Init+0x1f4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6899      	ldr	r1, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6899      	ldr	r1, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e00f      	b.n	8002206 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002204:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0202 	bic.w	r2, r2, #2
 8002214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
 8002220:	005a      	lsls	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002242:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002252:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	3b01      	subs	r3, #1
 8002260:	035a      	lsls	r2, r3, #13
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	e007      	b.n	800227c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	3b01      	subs	r3, #1
 8002298:	051a      	lsls	r2, r3, #20
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6899      	ldr	r1, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022be:	025a      	lsls	r2, r3, #9
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	029a      	lsls	r2, r3, #10
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40012300 	.word	0x40012300
 80022fc:	0f000001 	.word	0x0f000001

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <__NVIC_EnableIRQ+0x38>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246c:	d301      	bcc.n	8002472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <SysTick_Config+0x40>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247a:	210f      	movs	r1, #15
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f7ff ff8e 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <SysTick_Config+0x40>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <SysTick_Config+0x40>)
 800248c:	2207      	movs	r2, #7
 800248e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	e000e010 	.word	0xe000e010

080024a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff29 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c8:	f7ff ff3e 	bl	8002348 <__NVIC_GetPriorityGrouping>
 80024cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	6978      	ldr	r0, [r7, #20]
 80024d4:	f7ff ff8e 	bl	80023f4 <NVIC_EncodePriority>
 80024d8:	4602      	mov	r2, r0
 80024da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff5d 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff31 	bl	8002364 <__NVIC_EnableIRQ>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ffa2 	bl	800245c <SysTick_Config>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e16b      	b.n	8002818 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 815a 	bne.w	8002812 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d005      	beq.n	8002576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	2b02      	cmp	r3, #2
 8002574:	d130      	bne.n	80025d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 0201 	and.w	r2, r3, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d017      	beq.n	8002614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d123      	bne.n	8002668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	08da      	lsrs	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3208      	adds	r2, #8
 8002628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	220f      	movs	r2, #15
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3208      	adds	r2, #8
 8002662:	69b9      	ldr	r1, [r7, #24]
 8002664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80b4 	beq.w	8002812 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b60      	ldr	r3, [pc, #384]	; (8002830 <HAL_GPIO_Init+0x30c>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a5f      	ldr	r2, [pc, #380]	; (8002830 <HAL_GPIO_Init+0x30c>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <HAL_GPIO_Init+0x30c>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c6:	4a5b      	ldr	r2, [pc, #364]	; (8002834 <HAL_GPIO_Init+0x310>)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	220f      	movs	r2, #15
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_GPIO_Init+0x314>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02b      	beq.n	800274a <HAL_GPIO_Init+0x226>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a51      	ldr	r2, [pc, #324]	; (800283c <HAL_GPIO_Init+0x318>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d025      	beq.n	8002746 <HAL_GPIO_Init+0x222>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a50      	ldr	r2, [pc, #320]	; (8002840 <HAL_GPIO_Init+0x31c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01f      	beq.n	8002742 <HAL_GPIO_Init+0x21e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4f      	ldr	r2, [pc, #316]	; (8002844 <HAL_GPIO_Init+0x320>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d019      	beq.n	800273e <HAL_GPIO_Init+0x21a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4e      	ldr	r2, [pc, #312]	; (8002848 <HAL_GPIO_Init+0x324>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0x216>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_GPIO_Init+0x328>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00d      	beq.n	8002736 <HAL_GPIO_Init+0x212>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4c      	ldr	r2, [pc, #304]	; (8002850 <HAL_GPIO_Init+0x32c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <HAL_GPIO_Init+0x20e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4b      	ldr	r2, [pc, #300]	; (8002854 <HAL_GPIO_Init+0x330>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_GPIO_Init+0x20a>
 800272a:	2307      	movs	r3, #7
 800272c:	e00e      	b.n	800274c <HAL_GPIO_Init+0x228>
 800272e:	2308      	movs	r3, #8
 8002730:	e00c      	b.n	800274c <HAL_GPIO_Init+0x228>
 8002732:	2306      	movs	r3, #6
 8002734:	e00a      	b.n	800274c <HAL_GPIO_Init+0x228>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_Init+0x228>
 800273a:	2304      	movs	r3, #4
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x228>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x228>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x228>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x228>
 800274a:	2300      	movs	r3, #0
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800275c:	4935      	ldr	r1, [pc, #212]	; (8002834 <HAL_GPIO_Init+0x310>)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_GPIO_Init+0x334>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278e:	4a32      	ldr	r2, [pc, #200]	; (8002858 <HAL_GPIO_Init+0x334>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_GPIO_Init+0x334>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b8:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_GPIO_Init+0x334>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_GPIO_Init+0x334>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e2:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_GPIO_Init+0x334>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_GPIO_Init+0x334>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_GPIO_Init+0x334>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3301      	adds	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b0f      	cmp	r3, #15
 800281c:	f67f ae90 	bls.w	8002540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40013800 	.word	0x40013800
 8002838:	40020000 	.word	0x40020000
 800283c:	40020400 	.word	0x40020400
 8002840:	40020800 	.word	0x40020800
 8002844:	40020c00 	.word	0x40020c00
 8002848:	40021000 	.word	0x40021000
 800284c:	40021400 	.word	0x40021400
 8002850:	40021800 	.word	0x40021800
 8002854:	40021c00 	.word	0x40021c00
 8002858:	40013c00 	.word	0x40013c00

0800285c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e267      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d075      	beq.n	8002966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287a:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d00c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d112      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289e:	d10b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	4b7e      	ldr	r3, [pc, #504]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05b      	beq.n	8002964 <HAL_RCC_OscConfig+0x108>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d157      	bne.n	8002964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e242      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x74>
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xb0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x98>
 80028da:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6f      	ldr	r2, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6c      	ldr	r2, [pc, #432]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xb0>
 80028f4:	4b69      	ldr	r3, [pc, #420]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a65      	ldr	r2, [pc, #404]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff f8c4 	bl	8001aa0 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291c:	f7ff f8c0 	bl	8001aa0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e207      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xc0>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff f8b0 	bl	8001aa0 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002944:	f7ff f8ac 	bl	8001aa0 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1f3      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b51      	ldr	r3, [pc, #324]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0xe8>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x152>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1c7      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4937      	ldr	r1, [pc, #220]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_RCC_OscConfig+0x244>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7ff f865 	bl	8001aa0 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029da:	f7ff f861 	bl	8001aa0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1a8      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4925      	ldr	r1, [pc, #148]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x244>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7ff f844 	bl	8001aa0 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7ff f840 	bl	8001aa0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e187      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d036      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_RCC_OscConfig+0x248>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7ff f824 	bl	8001aa0 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7ff f820 	bl	8001aa0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e167      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x200>
 8002a7a:	e01b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_OscConfig+0x248>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7ff f80d 	bl	8001aa0 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	e00e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8a:	f7ff f809 	bl	8001aa0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d907      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e150      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	42470000 	.word	0x42470000
 8002aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ea      	bne.n	8002a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8097 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac6:	4b81      	ldr	r3, [pc, #516]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	4b7d      	ldr	r3, [pc, #500]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a7c      	ldr	r2, [pc, #496]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b7a      	ldr	r3, [pc, #488]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b77      	ldr	r3, [pc, #476]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a73      	ldr	r2, [pc, #460]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe ffc9 	bl	8001aa0 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7fe ffc5 	bl	8001aa0 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e10c      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2ea>
 8002b38:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	e01c      	b.n	8002b80 <HAL_RCC_OscConfig+0x324>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x30c>
 8002b4e:	4b5f      	ldr	r3, [pc, #380]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a5e      	ldr	r2, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x324>
 8002b68:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a54      	ldr	r2, [pc, #336]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe ff8a 	bl	8001aa0 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe ff86 	bl	8001aa0 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0cb      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCC_OscConfig+0x334>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7fe ff74 	bl	8001aa0 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fe ff70 	bl	8001aa0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0b5      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a38      	ldr	r2, [pc, #224]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a1 	beq.w	8002d3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bfa:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d05c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d141      	bne.n	8002c92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe ff44 	bl	8001aa0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe ff40 	bl	8001aa0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e087      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	491b      	ldr	r1, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fe ff19 	bl	8001aa0 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fe ff15 	bl	8001aa0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e05c      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x416>
 8002c90:	e054      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe ff02 	bl	8001aa0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe fefe 	bl	8001aa0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e045      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x444>
 8002cbe:	e03d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e038      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x4ec>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d121      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d11a      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d111      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0cc      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d90c      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b8      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	494d      	ldr	r1, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d044      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d119      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e07f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e067      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4934      	ldr	r1, [pc, #208]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fe30 	bl	8001aa0 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7fe fe2c 	bl	8001aa0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 020c 	and.w	r2, r3, #12
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1eb      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d20c      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e032      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4916      	ldr	r1, [pc, #88]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	490e      	ldr	r1, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ed2:	f000 f821 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	490a      	ldr	r1, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	5ccb      	ldrb	r3, [r1, r3]
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fd90 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	080041ac 	.word	0x080041ac
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000004 	.word	0x20000004

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1c:	b094      	sub	sp, #80	; 0x50
 8002f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	647b      	str	r3, [r7, #68]	; 0x44
 8002f24:	2300      	movs	r3, #0
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f28:	2300      	movs	r3, #0
 8002f2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f30:	4b79      	ldr	r3, [pc, #484]	; (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d00d      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x40>
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	f200 80e1 	bhi.w	8003104 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x34>
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f4a:	e0db      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f4c:	4b73      	ldr	r3, [pc, #460]	; (800311c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f50:	e0db      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f52:	4b73      	ldr	r3, [pc, #460]	; (8003120 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f56:	e0d8      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f58:	4b6f      	ldr	r3, [pc, #444]	; (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f62:	4b6d      	ldr	r3, [pc, #436]	; (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4b6a      	ldr	r3, [pc, #424]	; (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2200      	movs	r2, #0
 8002f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
 8002f82:	2300      	movs	r3, #0
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
 8002f86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	f04f 0000 	mov.w	r0, #0
 8002f92:	f04f 0100 	mov.w	r1, #0
 8002f96:	0159      	lsls	r1, r3, #5
 8002f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9c:	0150      	lsls	r0, r2, #5
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	1a51      	subs	r1, r2, r1
 8002fa6:	6139      	str	r1, [r7, #16]
 8002fa8:	4629      	mov	r1, r5
 8002faa:	eb63 0301 	sbc.w	r3, r3, r1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	018b      	lsls	r3, r1, #6
 8002fc0:	4651      	mov	r1, sl
 8002fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc6:	4651      	mov	r1, sl
 8002fc8:	018a      	lsls	r2, r1, #6
 8002fca:	4651      	mov	r1, sl
 8002fcc:	ebb2 0801 	subs.w	r8, r2, r1
 8002fd0:	4659      	mov	r1, fp
 8002fd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fea:	4690      	mov	r8, r2
 8002fec:	4699      	mov	r9, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	eb18 0303 	adds.w	r3, r8, r3
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	462b      	mov	r3, r5
 8002ff8:	eb49 0303 	adc.w	r3, r9, r3
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800300a:	4629      	mov	r1, r5
 800300c:	024b      	lsls	r3, r1, #9
 800300e:	4621      	mov	r1, r4
 8003010:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003014:	4621      	mov	r1, r4
 8003016:	024a      	lsls	r2, r1, #9
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301e:	2200      	movs	r2, #0
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
 8003022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003028:	f7fd fd48 	bl	8000abc <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003034:	e058      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003036:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	099b      	lsrs	r3, r3, #6
 800303c:	2200      	movs	r2, #0
 800303e:	4618      	mov	r0, r3
 8003040:	4611      	mov	r1, r2
 8003042:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
 800304c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003050:	4642      	mov	r2, r8
 8003052:	464b      	mov	r3, r9
 8003054:	f04f 0000 	mov.w	r0, #0
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	0159      	lsls	r1, r3, #5
 800305e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003062:	0150      	lsls	r0, r2, #5
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4641      	mov	r1, r8
 800306a:	ebb2 0a01 	subs.w	sl, r2, r1
 800306e:	4649      	mov	r1, r9
 8003070:	eb63 0b01 	sbc.w	fp, r3, r1
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003080:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003084:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003088:	ebb2 040a 	subs.w	r4, r2, sl
 800308c:	eb63 050b 	sbc.w	r5, r3, fp
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	00eb      	lsls	r3, r5, #3
 800309a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309e:	00e2      	lsls	r2, r4, #3
 80030a0:	4614      	mov	r4, r2
 80030a2:	461d      	mov	r5, r3
 80030a4:	4643      	mov	r3, r8
 80030a6:	18e3      	adds	r3, r4, r3
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	464b      	mov	r3, r9
 80030ac:	eb45 0303 	adc.w	r3, r5, r3
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030be:	4629      	mov	r1, r5
 80030c0:	028b      	lsls	r3, r1, #10
 80030c2:	4621      	mov	r1, r4
 80030c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c8:	4621      	mov	r1, r4
 80030ca:	028a      	lsls	r2, r1, #10
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d2:	2200      	movs	r2, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	61fa      	str	r2, [r7, #28]
 80030d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030dc:	f7fd fcee 	bl	8000abc <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4613      	mov	r3, r2
 80030e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	3301      	adds	r3, #1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetSysClockFreq+0x204>)
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800310c:	4618      	mov	r0, r3
 800310e:	3750      	adds	r7, #80	; 0x50
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	00f42400 	.word	0x00f42400
 8003120:	007a1200 	.word	0x007a1200

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_RCC_GetHCLKFreq+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff0 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	080041bc 	.word	0x080041bc

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffdc 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0b5b      	lsrs	r3, r3, #13
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	080041bc 	.word	0x080041bc

0800318c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e03f      	b.n	800321e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fb18 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f829 	bl	8003228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800322c:	b0c0      	sub	sp, #256	; 0x100
 800322e:	af00      	add	r7, sp, #0
 8003230:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	68d9      	ldr	r1, [r3, #12]
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	ea40 0301 	orr.w	r3, r0, r1
 8003250:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	431a      	orrs	r2, r3
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	431a      	orrs	r2, r3
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003280:	f021 010c 	bic.w	r1, r1, #12
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800328e:	430b      	orrs	r3, r1
 8003290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	6999      	ldr	r1, [r3, #24]
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	ea40 0301 	orr.w	r3, r0, r1
 80032ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b8f      	ldr	r3, [pc, #572]	; (80034f4 <UART_SetConfig+0x2cc>)
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d005      	beq.n	80032c8 <UART_SetConfig+0xa0>
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b8d      	ldr	r3, [pc, #564]	; (80034f8 <UART_SetConfig+0x2d0>)
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d104      	bne.n	80032d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c8:	f7ff ff4c 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 80032cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032d0:	e003      	b.n	80032da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032d2:	f7ff ff33 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 80032d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e4:	f040 810c 	bne.w	8003500 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032fa:	4622      	mov	r2, r4
 80032fc:	462b      	mov	r3, r5
 80032fe:	1891      	adds	r1, r2, r2
 8003300:	65b9      	str	r1, [r7, #88]	; 0x58
 8003302:	415b      	adcs	r3, r3
 8003304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003306:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800330a:	4621      	mov	r1, r4
 800330c:	eb12 0801 	adds.w	r8, r2, r1
 8003310:	4629      	mov	r1, r5
 8003312:	eb43 0901 	adc.w	r9, r3, r1
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800332a:	4690      	mov	r8, r2
 800332c:	4699      	mov	r9, r3
 800332e:	4623      	mov	r3, r4
 8003330:	eb18 0303 	adds.w	r3, r8, r3
 8003334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003338:	462b      	mov	r3, r5
 800333a:	eb49 0303 	adc.w	r3, r9, r3
 800333e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800334e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003356:	460b      	mov	r3, r1
 8003358:	18db      	adds	r3, r3, r3
 800335a:	653b      	str	r3, [r7, #80]	; 0x50
 800335c:	4613      	mov	r3, r2
 800335e:	eb42 0303 	adc.w	r3, r2, r3
 8003362:	657b      	str	r3, [r7, #84]	; 0x54
 8003364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800336c:	f7fd fba6 	bl	8000abc <__aeabi_uldivmod>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4b61      	ldr	r3, [pc, #388]	; (80034fc <UART_SetConfig+0x2d4>)
 8003376:	fba3 2302 	umull	r2, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	011c      	lsls	r4, r3, #4
 800337e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003388:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800338c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003390:	4642      	mov	r2, r8
 8003392:	464b      	mov	r3, r9
 8003394:	1891      	adds	r1, r2, r2
 8003396:	64b9      	str	r1, [r7, #72]	; 0x48
 8003398:	415b      	adcs	r3, r3
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800339c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033a0:	4641      	mov	r1, r8
 80033a2:	eb12 0a01 	adds.w	sl, r2, r1
 80033a6:	4649      	mov	r1, r9
 80033a8:	eb43 0b01 	adc.w	fp, r3, r1
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c0:	4692      	mov	sl, r2
 80033c2:	469b      	mov	fp, r3
 80033c4:	4643      	mov	r3, r8
 80033c6:	eb1a 0303 	adds.w	r3, sl, r3
 80033ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033ce:	464b      	mov	r3, r9
 80033d0:	eb4b 0303 	adc.w	r3, fp, r3
 80033d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033ec:	460b      	mov	r3, r1
 80033ee:	18db      	adds	r3, r3, r3
 80033f0:	643b      	str	r3, [r7, #64]	; 0x40
 80033f2:	4613      	mov	r3, r2
 80033f4:	eb42 0303 	adc.w	r3, r2, r3
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44
 80033fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003402:	f7fd fb5b 	bl	8000abc <__aeabi_uldivmod>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4611      	mov	r1, r2
 800340c:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <UART_SetConfig+0x2d4>)
 800340e:	fba3 2301 	umull	r2, r3, r3, r1
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2264      	movs	r2, #100	; 0x64
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	1acb      	subs	r3, r1, r3
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <UART_SetConfig+0x2d4>)
 8003424:	fba3 2302 	umull	r2, r3, r3, r2
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003430:	441c      	add	r4, r3
 8003432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003436:	2200      	movs	r2, #0
 8003438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800343c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003440:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003444:	4642      	mov	r2, r8
 8003446:	464b      	mov	r3, r9
 8003448:	1891      	adds	r1, r2, r2
 800344a:	63b9      	str	r1, [r7, #56]	; 0x38
 800344c:	415b      	adcs	r3, r3
 800344e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003454:	4641      	mov	r1, r8
 8003456:	1851      	adds	r1, r2, r1
 8003458:	6339      	str	r1, [r7, #48]	; 0x30
 800345a:	4649      	mov	r1, r9
 800345c:	414b      	adcs	r3, r1
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800346c:	4659      	mov	r1, fp
 800346e:	00cb      	lsls	r3, r1, #3
 8003470:	4651      	mov	r1, sl
 8003472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003476:	4651      	mov	r1, sl
 8003478:	00ca      	lsls	r2, r1, #3
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	4603      	mov	r3, r0
 8003480:	4642      	mov	r2, r8
 8003482:	189b      	adds	r3, r3, r2
 8003484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003488:	464b      	mov	r3, r9
 800348a:	460a      	mov	r2, r1
 800348c:	eb42 0303 	adc.w	r3, r2, r3
 8003490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034a8:	460b      	mov	r3, r1
 80034aa:	18db      	adds	r3, r3, r3
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ae:	4613      	mov	r3, r2
 80034b0:	eb42 0303 	adc.w	r3, r2, r3
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034be:	f7fd fafd 	bl	8000abc <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <UART_SetConfig+0x2d4>)
 80034c8:	fba3 1302 	umull	r1, r3, r3, r2
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	2164      	movs	r1, #100	; 0x64
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	3332      	adds	r3, #50	; 0x32
 80034da:	4a08      	ldr	r2, [pc, #32]	; (80034fc <UART_SetConfig+0x2d4>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	f003 0207 	and.w	r2, r3, #7
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4422      	add	r2, r4
 80034ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034f0:	e105      	b.n	80036fe <UART_SetConfig+0x4d6>
 80034f2:	bf00      	nop
 80034f4:	40011000 	.word	0x40011000
 80034f8:	40011400 	.word	0x40011400
 80034fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800350a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800350e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003512:	4642      	mov	r2, r8
 8003514:	464b      	mov	r3, r9
 8003516:	1891      	adds	r1, r2, r2
 8003518:	6239      	str	r1, [r7, #32]
 800351a:	415b      	adcs	r3, r3
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003522:	4641      	mov	r1, r8
 8003524:	1854      	adds	r4, r2, r1
 8003526:	4649      	mov	r1, r9
 8003528:	eb43 0501 	adc.w	r5, r3, r1
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	00eb      	lsls	r3, r5, #3
 8003536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353a:	00e2      	lsls	r2, r4, #3
 800353c:	4614      	mov	r4, r2
 800353e:	461d      	mov	r5, r3
 8003540:	4643      	mov	r3, r8
 8003542:	18e3      	adds	r3, r4, r3
 8003544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003548:	464b      	mov	r3, r9
 800354a:	eb45 0303 	adc.w	r3, r5, r3
 800354e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800355e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800356e:	4629      	mov	r1, r5
 8003570:	008b      	lsls	r3, r1, #2
 8003572:	4621      	mov	r1, r4
 8003574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003578:	4621      	mov	r1, r4
 800357a:	008a      	lsls	r2, r1, #2
 800357c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003580:	f7fd fa9c 	bl	8000abc <__aeabi_uldivmod>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4b60      	ldr	r3, [pc, #384]	; (800370c <UART_SetConfig+0x4e4>)
 800358a:	fba3 2302 	umull	r2, r3, r3, r2
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	011c      	lsls	r4, r3, #4
 8003592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003596:	2200      	movs	r2, #0
 8003598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800359c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035a4:	4642      	mov	r2, r8
 80035a6:	464b      	mov	r3, r9
 80035a8:	1891      	adds	r1, r2, r2
 80035aa:	61b9      	str	r1, [r7, #24]
 80035ac:	415b      	adcs	r3, r3
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b4:	4641      	mov	r1, r8
 80035b6:	1851      	adds	r1, r2, r1
 80035b8:	6139      	str	r1, [r7, #16]
 80035ba:	4649      	mov	r1, r9
 80035bc:	414b      	adcs	r3, r1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035cc:	4659      	mov	r1, fp
 80035ce:	00cb      	lsls	r3, r1, #3
 80035d0:	4651      	mov	r1, sl
 80035d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035d6:	4651      	mov	r1, sl
 80035d8:	00ca      	lsls	r2, r1, #3
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	4642      	mov	r2, r8
 80035e2:	189b      	adds	r3, r3, r2
 80035e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035e8:	464b      	mov	r3, r9
 80035ea:	460a      	mov	r2, r1
 80035ec:	eb42 0303 	adc.w	r3, r2, r3
 80035f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80035fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800360c:	4649      	mov	r1, r9
 800360e:	008b      	lsls	r3, r1, #2
 8003610:	4641      	mov	r1, r8
 8003612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003616:	4641      	mov	r1, r8
 8003618:	008a      	lsls	r2, r1, #2
 800361a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800361e:	f7fd fa4d 	bl	8000abc <__aeabi_uldivmod>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <UART_SetConfig+0x4e4>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2164      	movs	r1, #100	; 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	3332      	adds	r3, #50	; 0x32
 800363a:	4a34      	ldr	r2, [pc, #208]	; (800370c <UART_SetConfig+0x4e4>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003646:	441c      	add	r4, r3
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	673b      	str	r3, [r7, #112]	; 0x70
 8003650:	677a      	str	r2, [r7, #116]	; 0x74
 8003652:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003656:	4642      	mov	r2, r8
 8003658:	464b      	mov	r3, r9
 800365a:	1891      	adds	r1, r2, r2
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	415b      	adcs	r3, r3
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003666:	4641      	mov	r1, r8
 8003668:	1851      	adds	r1, r2, r1
 800366a:	6039      	str	r1, [r7, #0]
 800366c:	4649      	mov	r1, r9
 800366e:	414b      	adcs	r3, r1
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800367e:	4659      	mov	r1, fp
 8003680:	00cb      	lsls	r3, r1, #3
 8003682:	4651      	mov	r1, sl
 8003684:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003688:	4651      	mov	r1, sl
 800368a:	00ca      	lsls	r2, r1, #3
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	4603      	mov	r3, r0
 8003692:	4642      	mov	r2, r8
 8003694:	189b      	adds	r3, r3, r2
 8003696:	66bb      	str	r3, [r7, #104]	; 0x68
 8003698:	464b      	mov	r3, r9
 800369a:	460a      	mov	r2, r1
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	663b      	str	r3, [r7, #96]	; 0x60
 80036ac:	667a      	str	r2, [r7, #100]	; 0x64
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036ba:	4649      	mov	r1, r9
 80036bc:	008b      	lsls	r3, r1, #2
 80036be:	4641      	mov	r1, r8
 80036c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c4:	4641      	mov	r1, r8
 80036c6:	008a      	lsls	r2, r1, #2
 80036c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036cc:	f7fd f9f6 	bl	8000abc <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <UART_SetConfig+0x4e4>)
 80036d6:	fba3 1302 	umull	r1, r3, r3, r2
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2164      	movs	r1, #100	; 0x64
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	3332      	adds	r3, #50	; 0x32
 80036e8:	4a08      	ldr	r2, [pc, #32]	; (800370c <UART_SetConfig+0x4e4>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4422      	add	r2, r4
 80036fc:	609a      	str	r2, [r3, #8]
}
 80036fe:	bf00      	nop
 8003700:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003704:	46bd      	mov	sp, r7
 8003706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800370a:	bf00      	nop
 800370c:	51eb851f 	.word	0x51eb851f

08003710 <__errno>:
 8003710:	4b01      	ldr	r3, [pc, #4]	; (8003718 <__errno+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2000000c 	.word	0x2000000c

0800371c <__libc_init_array>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	4d0d      	ldr	r5, [pc, #52]	; (8003754 <__libc_init_array+0x38>)
 8003720:	4c0d      	ldr	r4, [pc, #52]	; (8003758 <__libc_init_array+0x3c>)
 8003722:	1b64      	subs	r4, r4, r5
 8003724:	10a4      	asrs	r4, r4, #2
 8003726:	2600      	movs	r6, #0
 8003728:	42a6      	cmp	r6, r4
 800372a:	d109      	bne.n	8003740 <__libc_init_array+0x24>
 800372c:	4d0b      	ldr	r5, [pc, #44]	; (800375c <__libc_init_array+0x40>)
 800372e:	4c0c      	ldr	r4, [pc, #48]	; (8003760 <__libc_init_array+0x44>)
 8003730:	f000 fc9c 	bl	800406c <_init>
 8003734:	1b64      	subs	r4, r4, r5
 8003736:	10a4      	asrs	r4, r4, #2
 8003738:	2600      	movs	r6, #0
 800373a:	42a6      	cmp	r6, r4
 800373c:	d105      	bne.n	800374a <__libc_init_array+0x2e>
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	f855 3b04 	ldr.w	r3, [r5], #4
 8003744:	4798      	blx	r3
 8003746:	3601      	adds	r6, #1
 8003748:	e7ee      	b.n	8003728 <__libc_init_array+0xc>
 800374a:	f855 3b04 	ldr.w	r3, [r5], #4
 800374e:	4798      	blx	r3
 8003750:	3601      	adds	r6, #1
 8003752:	e7f2      	b.n	800373a <__libc_init_array+0x1e>
 8003754:	08004200 	.word	0x08004200
 8003758:	08004200 	.word	0x08004200
 800375c:	08004200 	.word	0x08004200
 8003760:	08004204 	.word	0x08004204

08003764 <memset>:
 8003764:	4402      	add	r2, r0
 8003766:	4603      	mov	r3, r0
 8003768:	4293      	cmp	r3, r2
 800376a:	d100      	bne.n	800376e <memset+0xa>
 800376c:	4770      	bx	lr
 800376e:	f803 1b01 	strb.w	r1, [r3], #1
 8003772:	e7f9      	b.n	8003768 <memset+0x4>

08003774 <siprintf>:
 8003774:	b40e      	push	{r1, r2, r3}
 8003776:	b500      	push	{lr}
 8003778:	b09c      	sub	sp, #112	; 0x70
 800377a:	ab1d      	add	r3, sp, #116	; 0x74
 800377c:	9002      	str	r0, [sp, #8]
 800377e:	9006      	str	r0, [sp, #24]
 8003780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003784:	4809      	ldr	r0, [pc, #36]	; (80037ac <siprintf+0x38>)
 8003786:	9107      	str	r1, [sp, #28]
 8003788:	9104      	str	r1, [sp, #16]
 800378a:	4909      	ldr	r1, [pc, #36]	; (80037b0 <siprintf+0x3c>)
 800378c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003790:	9105      	str	r1, [sp, #20]
 8003792:	6800      	ldr	r0, [r0, #0]
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	a902      	add	r1, sp, #8
 8003798:	f000 f876 	bl	8003888 <_svfiprintf_r>
 800379c:	9b02      	ldr	r3, [sp, #8]
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	b01c      	add	sp, #112	; 0x70
 80037a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037a8:	b003      	add	sp, #12
 80037aa:	4770      	bx	lr
 80037ac:	2000000c 	.word	0x2000000c
 80037b0:	ffff0208 	.word	0xffff0208

080037b4 <strcat>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	4602      	mov	r2, r0
 80037b8:	7814      	ldrb	r4, [r2, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	3201      	adds	r2, #1
 80037be:	2c00      	cmp	r4, #0
 80037c0:	d1fa      	bne.n	80037b8 <strcat+0x4>
 80037c2:	3b01      	subs	r3, #1
 80037c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d1f9      	bne.n	80037c4 <strcat+0x10>
 80037d0:	bd10      	pop	{r4, pc}

080037d2 <__ssputs_r>:
 80037d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d6:	688e      	ldr	r6, [r1, #8]
 80037d8:	429e      	cmp	r6, r3
 80037da:	4682      	mov	sl, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	4690      	mov	r8, r2
 80037e0:	461f      	mov	r7, r3
 80037e2:	d838      	bhi.n	8003856 <__ssputs_r+0x84>
 80037e4:	898a      	ldrh	r2, [r1, #12]
 80037e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037ea:	d032      	beq.n	8003852 <__ssputs_r+0x80>
 80037ec:	6825      	ldr	r5, [r4, #0]
 80037ee:	6909      	ldr	r1, [r1, #16]
 80037f0:	eba5 0901 	sub.w	r9, r5, r1
 80037f4:	6965      	ldr	r5, [r4, #20]
 80037f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037fe:	3301      	adds	r3, #1
 8003800:	444b      	add	r3, r9
 8003802:	106d      	asrs	r5, r5, #1
 8003804:	429d      	cmp	r5, r3
 8003806:	bf38      	it	cc
 8003808:	461d      	movcc	r5, r3
 800380a:	0553      	lsls	r3, r2, #21
 800380c:	d531      	bpl.n	8003872 <__ssputs_r+0xa0>
 800380e:	4629      	mov	r1, r5
 8003810:	f000 fb62 	bl	8003ed8 <_malloc_r>
 8003814:	4606      	mov	r6, r0
 8003816:	b950      	cbnz	r0, 800382e <__ssputs_r+0x5c>
 8003818:	230c      	movs	r3, #12
 800381a:	f8ca 3000 	str.w	r3, [sl]
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	f04f 30ff 	mov.w	r0, #4294967295
 800382a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800382e:	6921      	ldr	r1, [r4, #16]
 8003830:	464a      	mov	r2, r9
 8003832:	f000 fabd 	bl	8003db0 <memcpy>
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800383c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003840:	81a3      	strh	r3, [r4, #12]
 8003842:	6126      	str	r6, [r4, #16]
 8003844:	6165      	str	r5, [r4, #20]
 8003846:	444e      	add	r6, r9
 8003848:	eba5 0509 	sub.w	r5, r5, r9
 800384c:	6026      	str	r6, [r4, #0]
 800384e:	60a5      	str	r5, [r4, #8]
 8003850:	463e      	mov	r6, r7
 8003852:	42be      	cmp	r6, r7
 8003854:	d900      	bls.n	8003858 <__ssputs_r+0x86>
 8003856:	463e      	mov	r6, r7
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	4632      	mov	r2, r6
 800385c:	4641      	mov	r1, r8
 800385e:	f000 fab5 	bl	8003dcc <memmove>
 8003862:	68a3      	ldr	r3, [r4, #8]
 8003864:	1b9b      	subs	r3, r3, r6
 8003866:	60a3      	str	r3, [r4, #8]
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	4433      	add	r3, r6
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	2000      	movs	r0, #0
 8003870:	e7db      	b.n	800382a <__ssputs_r+0x58>
 8003872:	462a      	mov	r2, r5
 8003874:	f000 fba4 	bl	8003fc0 <_realloc_r>
 8003878:	4606      	mov	r6, r0
 800387a:	2800      	cmp	r0, #0
 800387c:	d1e1      	bne.n	8003842 <__ssputs_r+0x70>
 800387e:	6921      	ldr	r1, [r4, #16]
 8003880:	4650      	mov	r0, sl
 8003882:	f000 fabd 	bl	8003e00 <_free_r>
 8003886:	e7c7      	b.n	8003818 <__ssputs_r+0x46>

08003888 <_svfiprintf_r>:
 8003888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	4698      	mov	r8, r3
 800388e:	898b      	ldrh	r3, [r1, #12]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	b09d      	sub	sp, #116	; 0x74
 8003894:	4607      	mov	r7, r0
 8003896:	460d      	mov	r5, r1
 8003898:	4614      	mov	r4, r2
 800389a:	d50e      	bpl.n	80038ba <_svfiprintf_r+0x32>
 800389c:	690b      	ldr	r3, [r1, #16]
 800389e:	b963      	cbnz	r3, 80038ba <_svfiprintf_r+0x32>
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	f000 fb19 	bl	8003ed8 <_malloc_r>
 80038a6:	6028      	str	r0, [r5, #0]
 80038a8:	6128      	str	r0, [r5, #16]
 80038aa:	b920      	cbnz	r0, 80038b6 <_svfiprintf_r+0x2e>
 80038ac:	230c      	movs	r3, #12
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295
 80038b4:	e0d1      	b.n	8003a5a <_svfiprintf_r+0x1d2>
 80038b6:	2340      	movs	r3, #64	; 0x40
 80038b8:	616b      	str	r3, [r5, #20]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9309      	str	r3, [sp, #36]	; 0x24
 80038be:	2320      	movs	r3, #32
 80038c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80038c8:	2330      	movs	r3, #48	; 0x30
 80038ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a74 <_svfiprintf_r+0x1ec>
 80038ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038d2:	f04f 0901 	mov.w	r9, #1
 80038d6:	4623      	mov	r3, r4
 80038d8:	469a      	mov	sl, r3
 80038da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038de:	b10a      	cbz	r2, 80038e4 <_svfiprintf_r+0x5c>
 80038e0:	2a25      	cmp	r2, #37	; 0x25
 80038e2:	d1f9      	bne.n	80038d8 <_svfiprintf_r+0x50>
 80038e4:	ebba 0b04 	subs.w	fp, sl, r4
 80038e8:	d00b      	beq.n	8003902 <_svfiprintf_r+0x7a>
 80038ea:	465b      	mov	r3, fp
 80038ec:	4622      	mov	r2, r4
 80038ee:	4629      	mov	r1, r5
 80038f0:	4638      	mov	r0, r7
 80038f2:	f7ff ff6e 	bl	80037d2 <__ssputs_r>
 80038f6:	3001      	adds	r0, #1
 80038f8:	f000 80aa 	beq.w	8003a50 <_svfiprintf_r+0x1c8>
 80038fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038fe:	445a      	add	r2, fp
 8003900:	9209      	str	r2, [sp, #36]	; 0x24
 8003902:	f89a 3000 	ldrb.w	r3, [sl]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80a2 	beq.w	8003a50 <_svfiprintf_r+0x1c8>
 800390c:	2300      	movs	r3, #0
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003916:	f10a 0a01 	add.w	sl, sl, #1
 800391a:	9304      	str	r3, [sp, #16]
 800391c:	9307      	str	r3, [sp, #28]
 800391e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003922:	931a      	str	r3, [sp, #104]	; 0x68
 8003924:	4654      	mov	r4, sl
 8003926:	2205      	movs	r2, #5
 8003928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800392c:	4851      	ldr	r0, [pc, #324]	; (8003a74 <_svfiprintf_r+0x1ec>)
 800392e:	f7fc fc57 	bl	80001e0 <memchr>
 8003932:	9a04      	ldr	r2, [sp, #16]
 8003934:	b9d8      	cbnz	r0, 800396e <_svfiprintf_r+0xe6>
 8003936:	06d0      	lsls	r0, r2, #27
 8003938:	bf44      	itt	mi
 800393a:	2320      	movmi	r3, #32
 800393c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003940:	0711      	lsls	r1, r2, #28
 8003942:	bf44      	itt	mi
 8003944:	232b      	movmi	r3, #43	; 0x2b
 8003946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800394a:	f89a 3000 	ldrb.w	r3, [sl]
 800394e:	2b2a      	cmp	r3, #42	; 0x2a
 8003950:	d015      	beq.n	800397e <_svfiprintf_r+0xf6>
 8003952:	9a07      	ldr	r2, [sp, #28]
 8003954:	4654      	mov	r4, sl
 8003956:	2000      	movs	r0, #0
 8003958:	f04f 0c0a 	mov.w	ip, #10
 800395c:	4621      	mov	r1, r4
 800395e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003962:	3b30      	subs	r3, #48	; 0x30
 8003964:	2b09      	cmp	r3, #9
 8003966:	d94e      	bls.n	8003a06 <_svfiprintf_r+0x17e>
 8003968:	b1b0      	cbz	r0, 8003998 <_svfiprintf_r+0x110>
 800396a:	9207      	str	r2, [sp, #28]
 800396c:	e014      	b.n	8003998 <_svfiprintf_r+0x110>
 800396e:	eba0 0308 	sub.w	r3, r0, r8
 8003972:	fa09 f303 	lsl.w	r3, r9, r3
 8003976:	4313      	orrs	r3, r2
 8003978:	9304      	str	r3, [sp, #16]
 800397a:	46a2      	mov	sl, r4
 800397c:	e7d2      	b.n	8003924 <_svfiprintf_r+0x9c>
 800397e:	9b03      	ldr	r3, [sp, #12]
 8003980:	1d19      	adds	r1, r3, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	9103      	str	r1, [sp, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	bfbb      	ittet	lt
 800398a:	425b      	neglt	r3, r3
 800398c:	f042 0202 	orrlt.w	r2, r2, #2
 8003990:	9307      	strge	r3, [sp, #28]
 8003992:	9307      	strlt	r3, [sp, #28]
 8003994:	bfb8      	it	lt
 8003996:	9204      	strlt	r2, [sp, #16]
 8003998:	7823      	ldrb	r3, [r4, #0]
 800399a:	2b2e      	cmp	r3, #46	; 0x2e
 800399c:	d10c      	bne.n	80039b8 <_svfiprintf_r+0x130>
 800399e:	7863      	ldrb	r3, [r4, #1]
 80039a0:	2b2a      	cmp	r3, #42	; 0x2a
 80039a2:	d135      	bne.n	8003a10 <_svfiprintf_r+0x188>
 80039a4:	9b03      	ldr	r3, [sp, #12]
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	9203      	str	r2, [sp, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bfb8      	it	lt
 80039b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80039b4:	3402      	adds	r4, #2
 80039b6:	9305      	str	r3, [sp, #20]
 80039b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a84 <_svfiprintf_r+0x1fc>
 80039bc:	7821      	ldrb	r1, [r4, #0]
 80039be:	2203      	movs	r2, #3
 80039c0:	4650      	mov	r0, sl
 80039c2:	f7fc fc0d 	bl	80001e0 <memchr>
 80039c6:	b140      	cbz	r0, 80039da <_svfiprintf_r+0x152>
 80039c8:	2340      	movs	r3, #64	; 0x40
 80039ca:	eba0 000a 	sub.w	r0, r0, sl
 80039ce:	fa03 f000 	lsl.w	r0, r3, r0
 80039d2:	9b04      	ldr	r3, [sp, #16]
 80039d4:	4303      	orrs	r3, r0
 80039d6:	3401      	adds	r4, #1
 80039d8:	9304      	str	r3, [sp, #16]
 80039da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039de:	4826      	ldr	r0, [pc, #152]	; (8003a78 <_svfiprintf_r+0x1f0>)
 80039e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039e4:	2206      	movs	r2, #6
 80039e6:	f7fc fbfb 	bl	80001e0 <memchr>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d038      	beq.n	8003a60 <_svfiprintf_r+0x1d8>
 80039ee:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <_svfiprintf_r+0x1f4>)
 80039f0:	bb1b      	cbnz	r3, 8003a3a <_svfiprintf_r+0x1b2>
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	3307      	adds	r3, #7
 80039f6:	f023 0307 	bic.w	r3, r3, #7
 80039fa:	3308      	adds	r3, #8
 80039fc:	9303      	str	r3, [sp, #12]
 80039fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a00:	4433      	add	r3, r6
 8003a02:	9309      	str	r3, [sp, #36]	; 0x24
 8003a04:	e767      	b.n	80038d6 <_svfiprintf_r+0x4e>
 8003a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	e7a5      	b.n	800395c <_svfiprintf_r+0xd4>
 8003a10:	2300      	movs	r3, #0
 8003a12:	3401      	adds	r4, #1
 8003a14:	9305      	str	r3, [sp, #20]
 8003a16:	4619      	mov	r1, r3
 8003a18:	f04f 0c0a 	mov.w	ip, #10
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a22:	3a30      	subs	r2, #48	; 0x30
 8003a24:	2a09      	cmp	r2, #9
 8003a26:	d903      	bls.n	8003a30 <_svfiprintf_r+0x1a8>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0c5      	beq.n	80039b8 <_svfiprintf_r+0x130>
 8003a2c:	9105      	str	r1, [sp, #20]
 8003a2e:	e7c3      	b.n	80039b8 <_svfiprintf_r+0x130>
 8003a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a34:	4604      	mov	r4, r0
 8003a36:	2301      	movs	r3, #1
 8003a38:	e7f0      	b.n	8003a1c <_svfiprintf_r+0x194>
 8003a3a:	ab03      	add	r3, sp, #12
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	462a      	mov	r2, r5
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <_svfiprintf_r+0x1f8>)
 8003a42:	a904      	add	r1, sp, #16
 8003a44:	4638      	mov	r0, r7
 8003a46:	f3af 8000 	nop.w
 8003a4a:	1c42      	adds	r2, r0, #1
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	d1d6      	bne.n	80039fe <_svfiprintf_r+0x176>
 8003a50:	89ab      	ldrh	r3, [r5, #12]
 8003a52:	065b      	lsls	r3, r3, #25
 8003a54:	f53f af2c 	bmi.w	80038b0 <_svfiprintf_r+0x28>
 8003a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a5a:	b01d      	add	sp, #116	; 0x74
 8003a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a60:	ab03      	add	r3, sp, #12
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	462a      	mov	r2, r5
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <_svfiprintf_r+0x1f8>)
 8003a68:	a904      	add	r1, sp, #16
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	f000 f87a 	bl	8003b64 <_printf_i>
 8003a70:	e7eb      	b.n	8003a4a <_svfiprintf_r+0x1c2>
 8003a72:	bf00      	nop
 8003a74:	080041c4 	.word	0x080041c4
 8003a78:	080041ce 	.word	0x080041ce
 8003a7c:	00000000 	.word	0x00000000
 8003a80:	080037d3 	.word	0x080037d3
 8003a84:	080041ca 	.word	0x080041ca

08003a88 <_printf_common>:
 8003a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	4699      	mov	r9, r3
 8003a90:	688a      	ldr	r2, [r1, #8]
 8003a92:	690b      	ldr	r3, [r1, #16]
 8003a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bfb8      	it	lt
 8003a9c:	4613      	movlt	r3, r2
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	b10a      	cbz	r2, 8003aae <_printf_common+0x26>
 8003aaa:	3301      	adds	r3, #1
 8003aac:	6033      	str	r3, [r6, #0]
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	0699      	lsls	r1, r3, #26
 8003ab2:	bf42      	ittt	mi
 8003ab4:	6833      	ldrmi	r3, [r6, #0]
 8003ab6:	3302      	addmi	r3, #2
 8003ab8:	6033      	strmi	r3, [r6, #0]
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	f015 0506 	ands.w	r5, r5, #6
 8003ac0:	d106      	bne.n	8003ad0 <_printf_common+0x48>
 8003ac2:	f104 0a19 	add.w	sl, r4, #25
 8003ac6:	68e3      	ldr	r3, [r4, #12]
 8003ac8:	6832      	ldr	r2, [r6, #0]
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	42ab      	cmp	r3, r5
 8003ace:	dc26      	bgt.n	8003b1e <_printf_common+0x96>
 8003ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ad4:	1e13      	subs	r3, r2, #0
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	bf18      	it	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	0692      	lsls	r2, r2, #26
 8003ade:	d42b      	bmi.n	8003b38 <_printf_common+0xb0>
 8003ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	47c0      	blx	r8
 8003aea:	3001      	adds	r0, #1
 8003aec:	d01e      	beq.n	8003b2c <_printf_common+0xa4>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	68e5      	ldr	r5, [r4, #12]
 8003af2:	6832      	ldr	r2, [r6, #0]
 8003af4:	f003 0306 	and.w	r3, r3, #6
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	bf08      	it	eq
 8003afc:	1aad      	subeq	r5, r5, r2
 8003afe:	68a3      	ldr	r3, [r4, #8]
 8003b00:	6922      	ldr	r2, [r4, #16]
 8003b02:	bf0c      	ite	eq
 8003b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b08:	2500      	movne	r5, #0
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	bfc4      	itt	gt
 8003b0e:	1a9b      	subgt	r3, r3, r2
 8003b10:	18ed      	addgt	r5, r5, r3
 8003b12:	2600      	movs	r6, #0
 8003b14:	341a      	adds	r4, #26
 8003b16:	42b5      	cmp	r5, r6
 8003b18:	d11a      	bne.n	8003b50 <_printf_common+0xc8>
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	e008      	b.n	8003b30 <_printf_common+0xa8>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4652      	mov	r2, sl
 8003b22:	4649      	mov	r1, r9
 8003b24:	4638      	mov	r0, r7
 8003b26:	47c0      	blx	r8
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d103      	bne.n	8003b34 <_printf_common+0xac>
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b34:	3501      	adds	r5, #1
 8003b36:	e7c6      	b.n	8003ac6 <_printf_common+0x3e>
 8003b38:	18e1      	adds	r1, r4, r3
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	2030      	movs	r0, #48	; 0x30
 8003b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b42:	4422      	add	r2, r4
 8003b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	e7c7      	b.n	8003ae0 <_printf_common+0x58>
 8003b50:	2301      	movs	r3, #1
 8003b52:	4622      	mov	r2, r4
 8003b54:	4649      	mov	r1, r9
 8003b56:	4638      	mov	r0, r7
 8003b58:	47c0      	blx	r8
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d0e6      	beq.n	8003b2c <_printf_common+0xa4>
 8003b5e:	3601      	adds	r6, #1
 8003b60:	e7d9      	b.n	8003b16 <_printf_common+0x8e>
	...

08003b64 <_printf_i>:
 8003b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	7e0f      	ldrb	r7, [r1, #24]
 8003b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b6c:	2f78      	cmp	r7, #120	; 0x78
 8003b6e:	4691      	mov	r9, r2
 8003b70:	4680      	mov	r8, r0
 8003b72:	460c      	mov	r4, r1
 8003b74:	469a      	mov	sl, r3
 8003b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b7a:	d807      	bhi.n	8003b8c <_printf_i+0x28>
 8003b7c:	2f62      	cmp	r7, #98	; 0x62
 8003b7e:	d80a      	bhi.n	8003b96 <_printf_i+0x32>
 8003b80:	2f00      	cmp	r7, #0
 8003b82:	f000 80d8 	beq.w	8003d36 <_printf_i+0x1d2>
 8003b86:	2f58      	cmp	r7, #88	; 0x58
 8003b88:	f000 80a3 	beq.w	8003cd2 <_printf_i+0x16e>
 8003b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b94:	e03a      	b.n	8003c0c <_printf_i+0xa8>
 8003b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b9a:	2b15      	cmp	r3, #21
 8003b9c:	d8f6      	bhi.n	8003b8c <_printf_i+0x28>
 8003b9e:	a101      	add	r1, pc, #4	; (adr r1, 8003ba4 <_printf_i+0x40>)
 8003ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ba4:	08003bfd 	.word	0x08003bfd
 8003ba8:	08003c11 	.word	0x08003c11
 8003bac:	08003b8d 	.word	0x08003b8d
 8003bb0:	08003b8d 	.word	0x08003b8d
 8003bb4:	08003b8d 	.word	0x08003b8d
 8003bb8:	08003b8d 	.word	0x08003b8d
 8003bbc:	08003c11 	.word	0x08003c11
 8003bc0:	08003b8d 	.word	0x08003b8d
 8003bc4:	08003b8d 	.word	0x08003b8d
 8003bc8:	08003b8d 	.word	0x08003b8d
 8003bcc:	08003b8d 	.word	0x08003b8d
 8003bd0:	08003d1d 	.word	0x08003d1d
 8003bd4:	08003c41 	.word	0x08003c41
 8003bd8:	08003cff 	.word	0x08003cff
 8003bdc:	08003b8d 	.word	0x08003b8d
 8003be0:	08003b8d 	.word	0x08003b8d
 8003be4:	08003d3f 	.word	0x08003d3f
 8003be8:	08003b8d 	.word	0x08003b8d
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003b8d 	.word	0x08003b8d
 8003bf4:	08003b8d 	.word	0x08003b8d
 8003bf8:	08003d07 	.word	0x08003d07
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	1d1a      	adds	r2, r3, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	602a      	str	r2, [r5, #0]
 8003c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0a3      	b.n	8003d58 <_printf_i+0x1f4>
 8003c10:	6820      	ldr	r0, [r4, #0]
 8003c12:	6829      	ldr	r1, [r5, #0]
 8003c14:	0606      	lsls	r6, r0, #24
 8003c16:	f101 0304 	add.w	r3, r1, #4
 8003c1a:	d50a      	bpl.n	8003c32 <_printf_i+0xce>
 8003c1c:	680e      	ldr	r6, [r1, #0]
 8003c1e:	602b      	str	r3, [r5, #0]
 8003c20:	2e00      	cmp	r6, #0
 8003c22:	da03      	bge.n	8003c2c <_printf_i+0xc8>
 8003c24:	232d      	movs	r3, #45	; 0x2d
 8003c26:	4276      	negs	r6, r6
 8003c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2c:	485e      	ldr	r0, [pc, #376]	; (8003da8 <_printf_i+0x244>)
 8003c2e:	230a      	movs	r3, #10
 8003c30:	e019      	b.n	8003c66 <_printf_i+0x102>
 8003c32:	680e      	ldr	r6, [r1, #0]
 8003c34:	602b      	str	r3, [r5, #0]
 8003c36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c3a:	bf18      	it	ne
 8003c3c:	b236      	sxthne	r6, r6
 8003c3e:	e7ef      	b.n	8003c20 <_printf_i+0xbc>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	6820      	ldr	r0, [r4, #0]
 8003c44:	1d19      	adds	r1, r3, #4
 8003c46:	6029      	str	r1, [r5, #0]
 8003c48:	0601      	lsls	r1, r0, #24
 8003c4a:	d501      	bpl.n	8003c50 <_printf_i+0xec>
 8003c4c:	681e      	ldr	r6, [r3, #0]
 8003c4e:	e002      	b.n	8003c56 <_printf_i+0xf2>
 8003c50:	0646      	lsls	r6, r0, #25
 8003c52:	d5fb      	bpl.n	8003c4c <_printf_i+0xe8>
 8003c54:	881e      	ldrh	r6, [r3, #0]
 8003c56:	4854      	ldr	r0, [pc, #336]	; (8003da8 <_printf_i+0x244>)
 8003c58:	2f6f      	cmp	r7, #111	; 0x6f
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2308      	moveq	r3, #8
 8003c5e:	230a      	movne	r3, #10
 8003c60:	2100      	movs	r1, #0
 8003c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c66:	6865      	ldr	r5, [r4, #4]
 8003c68:	60a5      	str	r5, [r4, #8]
 8003c6a:	2d00      	cmp	r5, #0
 8003c6c:	bfa2      	ittt	ge
 8003c6e:	6821      	ldrge	r1, [r4, #0]
 8003c70:	f021 0104 	bicge.w	r1, r1, #4
 8003c74:	6021      	strge	r1, [r4, #0]
 8003c76:	b90e      	cbnz	r6, 8003c7c <_printf_i+0x118>
 8003c78:	2d00      	cmp	r5, #0
 8003c7a:	d04d      	beq.n	8003d18 <_printf_i+0x1b4>
 8003c7c:	4615      	mov	r5, r2
 8003c7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c82:	fb03 6711 	mls	r7, r3, r1, r6
 8003c86:	5dc7      	ldrb	r7, [r0, r7]
 8003c88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c8c:	4637      	mov	r7, r6
 8003c8e:	42bb      	cmp	r3, r7
 8003c90:	460e      	mov	r6, r1
 8003c92:	d9f4      	bls.n	8003c7e <_printf_i+0x11a>
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d10b      	bne.n	8003cb0 <_printf_i+0x14c>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	07de      	lsls	r6, r3, #31
 8003c9c:	d508      	bpl.n	8003cb0 <_printf_i+0x14c>
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	6861      	ldr	r1, [r4, #4]
 8003ca2:	4299      	cmp	r1, r3
 8003ca4:	bfde      	ittt	le
 8003ca6:	2330      	movle	r3, #48	; 0x30
 8003ca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cb0:	1b52      	subs	r2, r2, r5
 8003cb2:	6122      	str	r2, [r4, #16]
 8003cb4:	f8cd a000 	str.w	sl, [sp]
 8003cb8:	464b      	mov	r3, r9
 8003cba:	aa03      	add	r2, sp, #12
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	f7ff fee2 	bl	8003a88 <_printf_common>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d14c      	bne.n	8003d62 <_printf_i+0x1fe>
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	b004      	add	sp, #16
 8003cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd2:	4835      	ldr	r0, [pc, #212]	; (8003da8 <_printf_i+0x244>)
 8003cd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003cd8:	6829      	ldr	r1, [r5, #0]
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ce0:	6029      	str	r1, [r5, #0]
 8003ce2:	061d      	lsls	r5, r3, #24
 8003ce4:	d514      	bpl.n	8003d10 <_printf_i+0x1ac>
 8003ce6:	07df      	lsls	r7, r3, #31
 8003ce8:	bf44      	itt	mi
 8003cea:	f043 0320 	orrmi.w	r3, r3, #32
 8003cee:	6023      	strmi	r3, [r4, #0]
 8003cf0:	b91e      	cbnz	r6, 8003cfa <_printf_i+0x196>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	f023 0320 	bic.w	r3, r3, #32
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	e7b0      	b.n	8003c60 <_printf_i+0xfc>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	f043 0320 	orr.w	r3, r3, #32
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	2378      	movs	r3, #120	; 0x78
 8003d08:	4828      	ldr	r0, [pc, #160]	; (8003dac <_printf_i+0x248>)
 8003d0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d0e:	e7e3      	b.n	8003cd8 <_printf_i+0x174>
 8003d10:	0659      	lsls	r1, r3, #25
 8003d12:	bf48      	it	mi
 8003d14:	b2b6      	uxthmi	r6, r6
 8003d16:	e7e6      	b.n	8003ce6 <_printf_i+0x182>
 8003d18:	4615      	mov	r5, r2
 8003d1a:	e7bb      	b.n	8003c94 <_printf_i+0x130>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	6826      	ldr	r6, [r4, #0]
 8003d20:	6961      	ldr	r1, [r4, #20]
 8003d22:	1d18      	adds	r0, r3, #4
 8003d24:	6028      	str	r0, [r5, #0]
 8003d26:	0635      	lsls	r5, r6, #24
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	d501      	bpl.n	8003d30 <_printf_i+0x1cc>
 8003d2c:	6019      	str	r1, [r3, #0]
 8003d2e:	e002      	b.n	8003d36 <_printf_i+0x1d2>
 8003d30:	0670      	lsls	r0, r6, #25
 8003d32:	d5fb      	bpl.n	8003d2c <_printf_i+0x1c8>
 8003d34:	8019      	strh	r1, [r3, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	6123      	str	r3, [r4, #16]
 8003d3a:	4615      	mov	r5, r2
 8003d3c:	e7ba      	b.n	8003cb4 <_printf_i+0x150>
 8003d3e:	682b      	ldr	r3, [r5, #0]
 8003d40:	1d1a      	adds	r2, r3, #4
 8003d42:	602a      	str	r2, [r5, #0]
 8003d44:	681d      	ldr	r5, [r3, #0]
 8003d46:	6862      	ldr	r2, [r4, #4]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7fc fa48 	bl	80001e0 <memchr>
 8003d50:	b108      	cbz	r0, 8003d56 <_printf_i+0x1f2>
 8003d52:	1b40      	subs	r0, r0, r5
 8003d54:	6060      	str	r0, [r4, #4]
 8003d56:	6863      	ldr	r3, [r4, #4]
 8003d58:	6123      	str	r3, [r4, #16]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d60:	e7a8      	b.n	8003cb4 <_printf_i+0x150>
 8003d62:	6923      	ldr	r3, [r4, #16]
 8003d64:	462a      	mov	r2, r5
 8003d66:	4649      	mov	r1, r9
 8003d68:	4640      	mov	r0, r8
 8003d6a:	47d0      	blx	sl
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d0ab      	beq.n	8003cc8 <_printf_i+0x164>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	079b      	lsls	r3, r3, #30
 8003d74:	d413      	bmi.n	8003d9e <_printf_i+0x23a>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	4298      	cmp	r0, r3
 8003d7c:	bfb8      	it	lt
 8003d7e:	4618      	movlt	r0, r3
 8003d80:	e7a4      	b.n	8003ccc <_printf_i+0x168>
 8003d82:	2301      	movs	r3, #1
 8003d84:	4632      	mov	r2, r6
 8003d86:	4649      	mov	r1, r9
 8003d88:	4640      	mov	r0, r8
 8003d8a:	47d0      	blx	sl
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d09b      	beq.n	8003cc8 <_printf_i+0x164>
 8003d90:	3501      	adds	r5, #1
 8003d92:	68e3      	ldr	r3, [r4, #12]
 8003d94:	9903      	ldr	r1, [sp, #12]
 8003d96:	1a5b      	subs	r3, r3, r1
 8003d98:	42ab      	cmp	r3, r5
 8003d9a:	dcf2      	bgt.n	8003d82 <_printf_i+0x21e>
 8003d9c:	e7eb      	b.n	8003d76 <_printf_i+0x212>
 8003d9e:	2500      	movs	r5, #0
 8003da0:	f104 0619 	add.w	r6, r4, #25
 8003da4:	e7f5      	b.n	8003d92 <_printf_i+0x22e>
 8003da6:	bf00      	nop
 8003da8:	080041d5 	.word	0x080041d5
 8003dac:	080041e6 	.word	0x080041e6

08003db0 <memcpy>:
 8003db0:	440a      	add	r2, r1
 8003db2:	4291      	cmp	r1, r2
 8003db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003db8:	d100      	bne.n	8003dbc <memcpy+0xc>
 8003dba:	4770      	bx	lr
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dc6:	4291      	cmp	r1, r2
 8003dc8:	d1f9      	bne.n	8003dbe <memcpy+0xe>
 8003dca:	bd10      	pop	{r4, pc}

08003dcc <memmove>:
 8003dcc:	4288      	cmp	r0, r1
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	eb01 0402 	add.w	r4, r1, r2
 8003dd4:	d902      	bls.n	8003ddc <memmove+0x10>
 8003dd6:	4284      	cmp	r4, r0
 8003dd8:	4623      	mov	r3, r4
 8003dda:	d807      	bhi.n	8003dec <memmove+0x20>
 8003ddc:	1e43      	subs	r3, r0, #1
 8003dde:	42a1      	cmp	r1, r4
 8003de0:	d008      	beq.n	8003df4 <memmove+0x28>
 8003de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dea:	e7f8      	b.n	8003dde <memmove+0x12>
 8003dec:	4402      	add	r2, r0
 8003dee:	4601      	mov	r1, r0
 8003df0:	428a      	cmp	r2, r1
 8003df2:	d100      	bne.n	8003df6 <memmove+0x2a>
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dfe:	e7f7      	b.n	8003df0 <memmove+0x24>

08003e00 <_free_r>:
 8003e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e02:	2900      	cmp	r1, #0
 8003e04:	d044      	beq.n	8003e90 <_free_r+0x90>
 8003e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e0a:	9001      	str	r0, [sp, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e12:	bfb8      	it	lt
 8003e14:	18e4      	addlt	r4, r4, r3
 8003e16:	f000 f913 	bl	8004040 <__malloc_lock>
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <_free_r+0x94>)
 8003e1c:	9801      	ldr	r0, [sp, #4]
 8003e1e:	6813      	ldr	r3, [r2, #0]
 8003e20:	b933      	cbnz	r3, 8003e30 <_free_r+0x30>
 8003e22:	6063      	str	r3, [r4, #4]
 8003e24:	6014      	str	r4, [r2, #0]
 8003e26:	b003      	add	sp, #12
 8003e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e2c:	f000 b90e 	b.w	800404c <__malloc_unlock>
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	d908      	bls.n	8003e46 <_free_r+0x46>
 8003e34:	6825      	ldr	r5, [r4, #0]
 8003e36:	1961      	adds	r1, r4, r5
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	bf01      	itttt	eq
 8003e3c:	6819      	ldreq	r1, [r3, #0]
 8003e3e:	685b      	ldreq	r3, [r3, #4]
 8003e40:	1949      	addeq	r1, r1, r5
 8003e42:	6021      	streq	r1, [r4, #0]
 8003e44:	e7ed      	b.n	8003e22 <_free_r+0x22>
 8003e46:	461a      	mov	r2, r3
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	b10b      	cbz	r3, 8003e50 <_free_r+0x50>
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	d9fa      	bls.n	8003e46 <_free_r+0x46>
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	1855      	adds	r5, r2, r1
 8003e54:	42a5      	cmp	r5, r4
 8003e56:	d10b      	bne.n	8003e70 <_free_r+0x70>
 8003e58:	6824      	ldr	r4, [r4, #0]
 8003e5a:	4421      	add	r1, r4
 8003e5c:	1854      	adds	r4, r2, r1
 8003e5e:	42a3      	cmp	r3, r4
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	d1e0      	bne.n	8003e26 <_free_r+0x26>
 8003e64:	681c      	ldr	r4, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	6053      	str	r3, [r2, #4]
 8003e6a:	4421      	add	r1, r4
 8003e6c:	6011      	str	r1, [r2, #0]
 8003e6e:	e7da      	b.n	8003e26 <_free_r+0x26>
 8003e70:	d902      	bls.n	8003e78 <_free_r+0x78>
 8003e72:	230c      	movs	r3, #12
 8003e74:	6003      	str	r3, [r0, #0]
 8003e76:	e7d6      	b.n	8003e26 <_free_r+0x26>
 8003e78:	6825      	ldr	r5, [r4, #0]
 8003e7a:	1961      	adds	r1, r4, r5
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	bf04      	itt	eq
 8003e80:	6819      	ldreq	r1, [r3, #0]
 8003e82:	685b      	ldreq	r3, [r3, #4]
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	bf04      	itt	eq
 8003e88:	1949      	addeq	r1, r1, r5
 8003e8a:	6021      	streq	r1, [r4, #0]
 8003e8c:	6054      	str	r4, [r2, #4]
 8003e8e:	e7ca      	b.n	8003e26 <_free_r+0x26>
 8003e90:	b003      	add	sp, #12
 8003e92:	bd30      	pop	{r4, r5, pc}
 8003e94:	200001c8 	.word	0x200001c8

08003e98 <sbrk_aligned>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4e0e      	ldr	r6, [pc, #56]	; (8003ed4 <sbrk_aligned+0x3c>)
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	6831      	ldr	r1, [r6, #0]
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	b911      	cbnz	r1, 8003eaa <sbrk_aligned+0x12>
 8003ea4:	f000 f8bc 	bl	8004020 <_sbrk_r>
 8003ea8:	6030      	str	r0, [r6, #0]
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 f8b7 	bl	8004020 <_sbrk_r>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	d00a      	beq.n	8003ecc <sbrk_aligned+0x34>
 8003eb6:	1cc4      	adds	r4, r0, #3
 8003eb8:	f024 0403 	bic.w	r4, r4, #3
 8003ebc:	42a0      	cmp	r0, r4
 8003ebe:	d007      	beq.n	8003ed0 <sbrk_aligned+0x38>
 8003ec0:	1a21      	subs	r1, r4, r0
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 f8ac 	bl	8004020 <_sbrk_r>
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d101      	bne.n	8003ed0 <sbrk_aligned+0x38>
 8003ecc:	f04f 34ff 	mov.w	r4, #4294967295
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	200001cc 	.word	0x200001cc

08003ed8 <_malloc_r>:
 8003ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003edc:	1ccd      	adds	r5, r1, #3
 8003ede:	f025 0503 	bic.w	r5, r5, #3
 8003ee2:	3508      	adds	r5, #8
 8003ee4:	2d0c      	cmp	r5, #12
 8003ee6:	bf38      	it	cc
 8003ee8:	250c      	movcc	r5, #12
 8003eea:	2d00      	cmp	r5, #0
 8003eec:	4607      	mov	r7, r0
 8003eee:	db01      	blt.n	8003ef4 <_malloc_r+0x1c>
 8003ef0:	42a9      	cmp	r1, r5
 8003ef2:	d905      	bls.n	8003f00 <_malloc_r+0x28>
 8003ef4:	230c      	movs	r3, #12
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	2600      	movs	r6, #0
 8003efa:	4630      	mov	r0, r6
 8003efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f00:	4e2e      	ldr	r6, [pc, #184]	; (8003fbc <_malloc_r+0xe4>)
 8003f02:	f000 f89d 	bl	8004040 <__malloc_lock>
 8003f06:	6833      	ldr	r3, [r6, #0]
 8003f08:	461c      	mov	r4, r3
 8003f0a:	bb34      	cbnz	r4, 8003f5a <_malloc_r+0x82>
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	4638      	mov	r0, r7
 8003f10:	f7ff ffc2 	bl	8003e98 <sbrk_aligned>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	4604      	mov	r4, r0
 8003f18:	d14d      	bne.n	8003fb6 <_malloc_r+0xde>
 8003f1a:	6834      	ldr	r4, [r6, #0]
 8003f1c:	4626      	mov	r6, r4
 8003f1e:	2e00      	cmp	r6, #0
 8003f20:	d140      	bne.n	8003fa4 <_malloc_r+0xcc>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	4631      	mov	r1, r6
 8003f26:	4638      	mov	r0, r7
 8003f28:	eb04 0803 	add.w	r8, r4, r3
 8003f2c:	f000 f878 	bl	8004020 <_sbrk_r>
 8003f30:	4580      	cmp	r8, r0
 8003f32:	d13a      	bne.n	8003faa <_malloc_r+0xd2>
 8003f34:	6821      	ldr	r1, [r4, #0]
 8003f36:	3503      	adds	r5, #3
 8003f38:	1a6d      	subs	r5, r5, r1
 8003f3a:	f025 0503 	bic.w	r5, r5, #3
 8003f3e:	3508      	adds	r5, #8
 8003f40:	2d0c      	cmp	r5, #12
 8003f42:	bf38      	it	cc
 8003f44:	250c      	movcc	r5, #12
 8003f46:	4629      	mov	r1, r5
 8003f48:	4638      	mov	r0, r7
 8003f4a:	f7ff ffa5 	bl	8003e98 <sbrk_aligned>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d02b      	beq.n	8003faa <_malloc_r+0xd2>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	442b      	add	r3, r5
 8003f56:	6023      	str	r3, [r4, #0]
 8003f58:	e00e      	b.n	8003f78 <_malloc_r+0xa0>
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	1b52      	subs	r2, r2, r5
 8003f5e:	d41e      	bmi.n	8003f9e <_malloc_r+0xc6>
 8003f60:	2a0b      	cmp	r2, #11
 8003f62:	d916      	bls.n	8003f92 <_malloc_r+0xba>
 8003f64:	1961      	adds	r1, r4, r5
 8003f66:	42a3      	cmp	r3, r4
 8003f68:	6025      	str	r5, [r4, #0]
 8003f6a:	bf18      	it	ne
 8003f6c:	6059      	strne	r1, [r3, #4]
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	bf08      	it	eq
 8003f72:	6031      	streq	r1, [r6, #0]
 8003f74:	5162      	str	r2, [r4, r5]
 8003f76:	604b      	str	r3, [r1, #4]
 8003f78:	4638      	mov	r0, r7
 8003f7a:	f104 060b 	add.w	r6, r4, #11
 8003f7e:	f000 f865 	bl	800404c <__malloc_unlock>
 8003f82:	f026 0607 	bic.w	r6, r6, #7
 8003f86:	1d23      	adds	r3, r4, #4
 8003f88:	1af2      	subs	r2, r6, r3
 8003f8a:	d0b6      	beq.n	8003efa <_malloc_r+0x22>
 8003f8c:	1b9b      	subs	r3, r3, r6
 8003f8e:	50a3      	str	r3, [r4, r2]
 8003f90:	e7b3      	b.n	8003efa <_malloc_r+0x22>
 8003f92:	6862      	ldr	r2, [r4, #4]
 8003f94:	42a3      	cmp	r3, r4
 8003f96:	bf0c      	ite	eq
 8003f98:	6032      	streq	r2, [r6, #0]
 8003f9a:	605a      	strne	r2, [r3, #4]
 8003f9c:	e7ec      	b.n	8003f78 <_malloc_r+0xa0>
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	6864      	ldr	r4, [r4, #4]
 8003fa2:	e7b2      	b.n	8003f0a <_malloc_r+0x32>
 8003fa4:	4634      	mov	r4, r6
 8003fa6:	6876      	ldr	r6, [r6, #4]
 8003fa8:	e7b9      	b.n	8003f1e <_malloc_r+0x46>
 8003faa:	230c      	movs	r3, #12
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f000 f84c 	bl	800404c <__malloc_unlock>
 8003fb4:	e7a1      	b.n	8003efa <_malloc_r+0x22>
 8003fb6:	6025      	str	r5, [r4, #0]
 8003fb8:	e7de      	b.n	8003f78 <_malloc_r+0xa0>
 8003fba:	bf00      	nop
 8003fbc:	200001c8 	.word	0x200001c8

08003fc0 <_realloc_r>:
 8003fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	4614      	mov	r4, r2
 8003fc8:	460e      	mov	r6, r1
 8003fca:	b921      	cbnz	r1, 8003fd6 <_realloc_r+0x16>
 8003fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	f7ff bf81 	b.w	8003ed8 <_malloc_r>
 8003fd6:	b92a      	cbnz	r2, 8003fe4 <_realloc_r+0x24>
 8003fd8:	f7ff ff12 	bl	8003e00 <_free_r>
 8003fdc:	4625      	mov	r5, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fe4:	f000 f838 	bl	8004058 <_malloc_usable_size_r>
 8003fe8:	4284      	cmp	r4, r0
 8003fea:	4607      	mov	r7, r0
 8003fec:	d802      	bhi.n	8003ff4 <_realloc_r+0x34>
 8003fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ff2:	d812      	bhi.n	800401a <_realloc_r+0x5a>
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f7ff ff6e 	bl	8003ed8 <_malloc_r>
 8003ffc:	4605      	mov	r5, r0
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d0ed      	beq.n	8003fde <_realloc_r+0x1e>
 8004002:	42bc      	cmp	r4, r7
 8004004:	4622      	mov	r2, r4
 8004006:	4631      	mov	r1, r6
 8004008:	bf28      	it	cs
 800400a:	463a      	movcs	r2, r7
 800400c:	f7ff fed0 	bl	8003db0 <memcpy>
 8004010:	4631      	mov	r1, r6
 8004012:	4640      	mov	r0, r8
 8004014:	f7ff fef4 	bl	8003e00 <_free_r>
 8004018:	e7e1      	b.n	8003fde <_realloc_r+0x1e>
 800401a:	4635      	mov	r5, r6
 800401c:	e7df      	b.n	8003fde <_realloc_r+0x1e>
	...

08004020 <_sbrk_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4d06      	ldr	r5, [pc, #24]	; (800403c <_sbrk_r+0x1c>)
 8004024:	2300      	movs	r3, #0
 8004026:	4604      	mov	r4, r0
 8004028:	4608      	mov	r0, r1
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	f7fd fc60 	bl	80018f0 <_sbrk>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d102      	bne.n	800403a <_sbrk_r+0x1a>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	b103      	cbz	r3, 800403a <_sbrk_r+0x1a>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	200001d0 	.word	0x200001d0

08004040 <__malloc_lock>:
 8004040:	4801      	ldr	r0, [pc, #4]	; (8004048 <__malloc_lock+0x8>)
 8004042:	f000 b811 	b.w	8004068 <__retarget_lock_acquire_recursive>
 8004046:	bf00      	nop
 8004048:	200001d4 	.word	0x200001d4

0800404c <__malloc_unlock>:
 800404c:	4801      	ldr	r0, [pc, #4]	; (8004054 <__malloc_unlock+0x8>)
 800404e:	f000 b80c 	b.w	800406a <__retarget_lock_release_recursive>
 8004052:	bf00      	nop
 8004054:	200001d4 	.word	0x200001d4

08004058 <_malloc_usable_size_r>:
 8004058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800405c:	1f18      	subs	r0, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	bfbc      	itt	lt
 8004062:	580b      	ldrlt	r3, [r1, r0]
 8004064:	18c0      	addlt	r0, r0, r3
 8004066:	4770      	bx	lr

08004068 <__retarget_lock_acquire_recursive>:
 8004068:	4770      	bx	lr

0800406a <__retarget_lock_release_recursive>:
 800406a:	4770      	bx	lr

0800406c <_init>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	bf00      	nop
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr

08004078 <_fini>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr
